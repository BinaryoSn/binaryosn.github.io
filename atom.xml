<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amosannn</title>
  <subtitle>Amo&#39;s binary space</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amosannn.github.io/"/>
  <updated>2018-11-06T07:54:34.227Z</updated>
  <id>https://amosannn.github.io/</id>
  
  <author>
    <name>Amosannn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Airflow 居然趁服务器不注意卡在 running 状态不执行</title>
    <link href="https://amosannn.github.io/2018/11/01/airflow-dag-get-stuck-in-running-state/"/>
    <id>https://amosannn.github.io/2018/11/01/airflow-dag-get-stuck-in-running-state/</id>
    <published>2018-11-01T03:11:16.000Z</published>
    <updated>2018-11-06T07:54:34.227Z</updated>
    
    <content type="html"><![CDATA[<p>就像这样，这小子坏得很。</p>
<p><img src="/images/airflow/1541489895790.png" alt="1541489895790"></p>
<h2 id="初现端倪"><a href="#初现端倪" class="headerlink" title="初现端倪"></a>初现端倪</h2><p>好在 <code>Task Instance Details</code> 中可以看到这小子心里都在想些啥，这是十分关键的，以及具有重大突破性的调查入口！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">depends_on_past is true for this task&apos;s DAG, but the previous task instance has not run yet.</div></pre></td></tr></table></figure>
<p>做为一个新来的 dag，旗下每一个格子都是小白块，怎么可能会有前置依赖没执行？十分任性！</p>
<h2 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h2><p>找到问题所在就好办了</p>
<p>前往代码中查看，我确实将 <code>depends_on_past</code> 置为 True` 了，但是每个 task 之间的依赖更是没有问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">default_args = &#123;</div><div class="line">    &apos;owner&apos;: &apos;amos&apos;,</div><div class="line">    &apos;depends_on_past&apos;: True,</div><div class="line">    # &apos;start_date&apos;: airflow.utils.dates.days_ago(1),</div><div class="line">    &apos;start_date&apos;: datetime.now(),</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尝试着将 <code>depends_on_past</code> 置为 <code>False</code> ，Airflow 立马开始了属于他自己的奔跑（按照依赖关系奔跑）！</p>
<h2 id="别出纰漏"><a href="#别出纰漏" class="headerlink" title="别出纰漏"></a>别出纰漏</h2><p>顺便一提，还有一种可能会导致这种情况的发生</p>
<p>那就是没有开启这个 dag，也就是 <code>trigger</code> 的状态为 <code>off</code>，这样会把任务挂起，直至开启 dag 才会执行。</p>
<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="https://stackoverflow.com/questions/51261841/airflow-dag-get-stuck-in-running-state" target="_blank" rel="external">AirFlow DAG Get stuck in running state</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就像这样，这小子坏得很。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/airflow/1541489895790.png&quot; alt=&quot;1541489895790&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;初现端倪&quot;&gt;&lt;a href=&quot;#初现端倪&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="Airflow" scheme="https://amosannn.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow 不遵循调度配置执行</title>
    <link href="https://amosannn.github.io/2018/10/31/airflow-dag-does-not-follow-the-schedule-configuration-execution/"/>
    <id>https://amosannn.github.io/2018/10/31/airflow-dag-does-not-follow-the-schedule-configuration-execution/</id>
    <published>2018-10-31T08:45:11.000Z</published>
    <updated>2018-11-06T08:40:19.598Z</updated>
    
    <content type="html"><![CDATA[<p>在 Airflow 的使用过程中，曾多次遇到令人惊奇的现象，其中之一便是它没有按照 dag 中的配置执行。</p>
<p>可能你也会遇到这样的情况，为什么配置了 <code>schedule_interval</code> 和 <code>start_date</code>，但是依旧没有按照调度配置的时间自动执行。</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>比如我这么配：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timedelta</div><div class="line"></div><div class="line">default_args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'amos'</span>,</div><div class="line">    <span class="string">'depends_on_past'</span>: <span class="keyword">False</span>,</div><div class="line">    <span class="string">'start_date'</span>: datetime.now(),</div><div class="line">&#125;</div><div class="line"></div><div class="line">dag = DAG(<span class="string">'test_rerun_dag'</span>,</div><div class="line">          default_args=default_args,</div><div class="line">          description=<span class="string">'test_rerun_dag'</span>,</div><div class="line">          schedule_interval=<span class="string">"*/1 * * * *"</span>)</div></pre></td></tr></table></figure>
<p>照理说它应该按照配置中写的，每分钟执行一次操作。可是它没有，是它变心了吗？</p>
<p>不，不是的。</p>
<h2 id="这究竟是为什么"><a href="#这究竟是为什么" class="headerlink" title="这究竟是为什么"></a>这究竟是为什么</h2><blockquote>
<p>Airflow sets execution_date based on the left bound of the schedule period it is covering, not based on when it fires (which would be the right bound of the period) .</p>
</blockquote>
<p>原因在于 Airflow 是个有原则的程序，它有个窗口的概念，会把 start_date 开始后，符合 schedule_interval 定义的第一个时间点记为 execution_date，但是会在下个时间点到达时才开始运行。也就是说由于这个窗口的原因，last run 会滞后一个周期。 </p>
<p>所以，按上面的配置来说，每次当 scheduler 读到了这段 DAG，它会拿小本本记下 start_date 和每分钟执行的操作，准备在下一分钟开始执行了。但是当下一分钟来临的时候，它看了看表，嗯！start_date + 1，那么 execution_date 也 + 1，于是把小本本上的 start_date 划掉重写。所以 start_date 在不断被覆盖的过程中，任务没有像我们预想中的在调度奔跑，反而一直是挂起状态。</p>
<h2 id="这可咋整啊"><a href="#这可咋整啊" class="headerlink" title="这可咋整啊"></a>这可咋整啊</h2><p>那么如何才能真正地让它规律地执行呢？</p>
<p>将 start_date 往前错位到上一个周期</p>
<p>什么意思呢？假如本例中的每分钟执行一次，那就将 start_date 调整到上一分钟的状态</p>
<blockquote>
<p><del>‘start_date’: datetime.now()</del></p>
<p>‘start_date’: datetime.now() - timedelta(minutes=1)</p>
</blockquote>
<p>这下 scheduler 就可以在小本本工工整整地记录每一次调度计划，而不用写了划，划了写，把小本本涂得黑黑的了！</p>
<hr>
<p>如果你的 dag 趁你不注意卡在running 状态下不能动弹，或许你可以改改调度时间或周期。</p>
<p>或者试试参考这篇文章：<a href="/2018/11/01/airflow-dag-get-stuck-in-running-state/" title="Airflow 居然趁服务器不注意卡在 running 状态不执行">Airflow 居然趁服务器不注意卡在 running 状态不执行</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Airflow 的使用过程中，曾多次遇到令人惊奇的现象，其中之一便是它没有按照 dag 中的配置执行。&lt;/p&gt;
&lt;p&gt;可能你也会遇到这样的情况，为什么配置了 &lt;code&gt;schedule_interval&lt;/code&gt; 和 &lt;code&gt;start_date&lt;/code&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="Airflow" scheme="https://amosannn.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow 概念梳理</title>
    <link href="https://amosannn.github.io/2018/10/30/airflow-concept-combing/"/>
    <id>https://amosannn.github.io/2018/10/30/airflow-concept-combing/</id>
    <published>2018-10-30T11:18:16.000Z</published>
    <updated>2018-11-06T07:51:19.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h1><p>Airflow 基于一个重要的数据结构，DAG。</p>
<p>为什么依赖 DAG？</p>
<p>LInux 与 WIndows 的 crontab 与任务计划，只可以配置定时任务或间隔任务，无法配置作业间的依赖关系。</p>
<p>一个很大的弊端是，如果我们需要在作业 A 执行之后才有供作业 B 执行的数据，而出现了不可因素导致轮到作业 B 执行的时候作业 A 还未执行完毕。这必定会导致数据缺失，或作业 B 执行失败。</p>
<p>所以，使用有向无环图来定义作业流，在任务调度中是非常合适的。</p>
<h1 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h1><h2 id="Webserver"><a href="#Webserver" class="headerlink" title="Webserver"></a>Webserver</h2><p>是 Airflow 的基础服务，提供了前端可视化管理工具，可视化才是最好的！</p>
<p>你可以在上面执行调度操作，查看任务处理耗时分析，清除状态作业重跑，查看日志，管理用户和数据连接，以及配置的 DAG 是否正确等。</p>
<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>也是 Airflow 的基础服务之一，身为调度器，负责监控 DAG 的状态，计算调度时间，启动满足条件的 DAG，并将任务提交到 Executor。</p>
<h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>工作节点，这个角色类似于 yarn 中的 namenode，直接负责 Executor 的执行分配。</p>
<p>ps: yarn 为 hadoop 中的资源管理系统</p>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Airflow 有三种执行器</p>
<ul>
<li><p>SequentialExecutor </p>
<p>顺序执行器，无需额外配置，默认使用 sqlite 作为元数据，因此也无法支持任务之间的并发操作。</p>
</li>
<li><p>LocalExecutor</p>
<p>本地执行器，不支持 sqlite，但可使用 mysql、oracle、postgress 等主流数据库，需配置数据库链接 URL。</p>
</li>
<li><p>CeleryExecutor</p>
<p>江湖人称芹菜，是一款基于消息队列的分布式异步任务调度工具，可将任务运行在千里之外（远程节点），十分优秀！</p>
<p>ps: 需执行 Airflow 的工作节点 <code>airflow worker</code></p>
<p>pps: 需额外安装 <code>Redis</code> 或 <code>RabbitMQ</code> 等</p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>有了作业流，就得有作业内容，Operators 就是做这事的。</p>
<p>Airflow 目前支持十多种不同的作业类型</p>
<ul>
<li>BashOperator</li>
<li>PythonOperator</li>
<li>DockerOperator</li>
<li>DruidCheckOperator</li>
<li>EmailOperator</li>
<li>HiveOperator</li>
<li>HTTPOperator</li>
<li>DummyOperator </li>
<li>……</li>
</ul>
<p>他们的作用都像字面意思说的那样，可完成相应的操作或调用。</p>
<p>值得注意的是 DummyOperator，是个空操作，相当于标记和中转节点。</p>
<p>当然，他们有一个共同的爸爸「BaseOperator」，全部首其控制，从中继承的功能也会因为他一人的修改而相应改变。</p>
<h2 id="Timezone"><a href="#Timezone" class="headerlink" title="Timezone"></a>Timezone</h2><p>在 1.9 版本及以前，Airflow 使用的是本地时间，不同服务器时区不同容易产生运行错误。</p>
<p>而在 1.10 中，加入了自定义的时区配置（1.9 的时区配置无法生效，大坑。。）</p>
<h2 id="预警与监控"><a href="#预警与监控" class="headerlink" title="预警与监控"></a>预警与监控</h2><p>当任务执行失败或状态异常时，发送短信或邮件。</p>
<p>这是个棒棒的功能，守卫再严的城池也有失守的时候，硝烟一起，家书即刻送达。</p>
<p>你说，这为镇守襄阳城提供多少便利？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;有向无环图&quot;&gt;&lt;a href=&quot;#有向无环图&quot; class=&quot;headerlink&quot; title=&quot;有向无环图&quot;&gt;&lt;/a&gt;有向无环图&lt;/h1&gt;&lt;p&gt;Airflow 基于一个重要的数据结构，DAG。&lt;/p&gt;
&lt;p&gt;为什么依赖 DAG？&lt;/p&gt;
&lt;p&gt;LInux 与 
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="Airflow" scheme="https://amosannn.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>Airflow 安装及跳坑指南</title>
    <link href="https://amosannn.github.io/2018/10/29/airflow_install_and_more/"/>
    <id>https://amosannn.github.io/2018/10/29/airflow_install_and_more/</id>
    <published>2018-10-29T11:58:16.000Z</published>
    <updated>2018-11-06T08:27:11.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有啥用"><a href="#有啥用" class="headerlink" title="有啥用"></a>有啥用</h2><p><code>Airflow</code> 简单来说就是管理和调度各种离线定时的 Job，用以替代 <code>crontab</code>， 可以把它看作是个高级版的 <code>crontab</code>。</p>
<p>如果 <code>crontab</code>  的规模达到百千万，管理起来会非常复杂。这个时候可以考虑将任务迁移到 <code>Airflow</code>，你将可以清楚地分辨出哪些 DAG 是稳定的，哪些不那么见状，需要优化。如果 DAG 不足以打动你，强交互性、友好的界面管理、重跑任务以及合适的报警级别足以让你感觉相见恨晚。</p>
<h2 id="简单记录安装及配置过程"><a href="#简单记录安装及配置过程" class="headerlink" title="简单记录安装及配置过程"></a>简单记录安装及配置过程</h2><p><code>Airflow</code> 在 1.8 之后更名为 <code>apache-airflow</code></p>
<blockquote>
<p>NOTE: The transition from 1.8.0 (or before) to 1.8.1 (or after) requires uninstalling Airflow before installing the new version. The package name was changed from airflow to apache-airflow as of version 1.8.1.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install apache-airflow</div></pre></td></tr></table></figure>
<p>如果你想安装 1.8.0 的 <code>Airflow</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip3 install airflow</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ airflow inidb</div></pre></td></tr></table></figure>
<p>初始化后默认会在 <code>~/</code> 下生成 <code>airflow</code> 文件夹，如果想更换 <code>MySQL</code> 或其他数据库做为元数据存储，那么在配置文件中修改配置后重新初始化即可。</p>
<p>关于如何在 python3 中安装 <code>MySQL</code>，此处不做赘述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi ~/airflow/airflow.cfg</div><div class="line">sql_alchemy_conn = mysql://username:password@host:port/airflow</div></pre></td></tr></table></figure>
<h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><p><code>Airflow</code> 内置了芹菜的调度器，只需要手动安装芹菜并进行简单配置就可以使用。</p>
<p><code>Celery</code> 可使用 <code>RabbitMQ</code> 或 <code>Redis</code> 做为 broker，按需选择即可，此处也不做赘述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pip3 install apache-airflow[celery]</div><div class="line"></div><div class="line"># 启用还需修改几处配置</div><div class="line">$ vi ~/airflow/airflow.cfg</div><div class="line">executor = CeleryExecutor</div><div class="line">broker_url = redis://127.0.0.1:6379/0</div><div class="line">result_backend = db+mysql://root:xxx@127.0.0.1:3306/airflow</div></pre></td></tr></table></figure>
<h3 id="这里有一个可能会踩入的小坑"><a href="#这里有一个可能会踩入的小坑" class="headerlink" title="这里有一个可能会踩入的小坑"></a>这里有一个可能会踩入的小坑</h3><p>既然项目更名了，在安装芹菜等扩展时，记得选对项目。</p>
<p>否则便会安装两个项目，导致后期使用出现冲突。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ pip3 install apache-airflow</div><div class="line">$ pip3 install airflow[celery]</div><div class="line"></div><div class="line">$ pip3 list</div><div class="line">...</div><div class="line">apache-airflow (1.10.0)</div><div class="line">airflow (1.8.0)</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 启动 webserver</div><div class="line">$ airflow webserver -p 8080</div><div class="line"># 启动调度程序</div><div class="line">$ airflow scheduler</div><div class="line"># 启动 Celery</div><div class="line">$ airflow worker</div></pre></td></tr></table></figure>
<p>启动完成后就可以运行官方内置的 example 测试啦！</p>
<h2 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a>大坑</h2><p>记录几个遇到的报错</p>
<h3 id="airflow-exceptions-AirflowException-Could-not-create-Fernet-object-Incorrect-padding"><a href="#airflow-exceptions-AirflowException-Could-not-create-Fernet-object-Incorrect-padding" class="headerlink" title="airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding"></a>airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$ airflow initdb</div><div class="line">[2018-10-30 15:30:26,857] &#123;settings.py:174&#125; INFO - setting.configure_orm(): Using pool settings. pool_size=5, pool_recycle=1800</div><div class="line">[2018-10-30 15:30:27,164] &#123;__init__.py:51&#125; INFO - Using executor CeleryExecutor</div><div class="line">DB: mysql://root:***@localhost:3306/airflow</div><div class="line">[2018-10-30 15:30:27,320] &#123;db.py:338&#125; INFO - Creating tables</div><div class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</div><div class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 159, in get_fernet</div><div class="line">    _fernet = Fernet(configuration.conf.get(&apos;core&apos;, &apos;FERNET_KEY&apos;).encode(&apos;utf-8&apos;))</div><div class="line">  File &quot;/usr/lib/python3/dist-packages/cryptography/fernet.py&quot;, line 34, in __init__</div><div class="line">    key = base64.urlsafe_b64decode(key)</div><div class="line">  File &quot;/usr/lib/python3.5/base64.py&quot;, line 134, in urlsafe_b64decode</div><div class="line">    return b64decode(s)</div><div class="line">  File &quot;/usr/lib/python3.5/base64.py&quot;, line 88, in b64decode</div><div class="line">    return binascii.a2b_base64(s)</div><div class="line">binascii.Error: Incorrect padding</div><div class="line"></div><div class="line">During handling of the above exception, another exception occurred:</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/home/ubuntu/.local/bin/airflow&quot;, line 32, in &lt;module&gt;</div><div class="line">    args.func(args)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/bin/cli.py&quot;, line 1002, in initdb</div><div class="line">    db_utils.initdb(settings.RBAC)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/utils/db.py&quot;, line 103, in initdb</div><div class="line">    schema=&apos;airflow_ci&apos;))</div><div class="line">  File &quot;&lt;string&gt;&quot;, line 4, in __init__</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/orm/state.py&quot;, line 414, in _initialize_instance</div><div class="line">    manager.dispatch.init_failure(self, args, kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py&quot;, line 66, in __exit__</div><div class="line">    compat.reraise(exc_type, exc_value, exc_tb)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/util/compat.py&quot;, line 187, in reraise</div><div class="line">    raise value</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/sqlalchemy/orm/state.py&quot;, line 411, in _initialize_instance</div><div class="line">    return manager.original_init(*mixed[1:], **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 677, in __init__</div><div class="line">    self.extra = extra</div><div class="line">  File &quot;&lt;string&gt;&quot;, line 1, in __set__</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 731, in set_extra</div><div class="line">    fernet = get_fernet()</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/models.py&quot;, line 163, in get_fernet</div><div class="line">    raise AirflowException(&quot;Could not create Fernet object: &#123;&#125;&quot;.format(ve))</div><div class="line">airflow.exceptions.AirflowException: Could not create Fernet object: Incorrect padding</div></pre></td></tr></table></figure>
<h4 id="fernet-key"><a href="#fernet-key" class="headerlink" title="fernet_key"></a>fernet_key</h4><p>关于 <code>fernet_key</code> 是什么，配置文件里给出了相应的解释：</p>
<blockquote>
<p>Secret key to save connection passwords in the db</p>
</blockquote>
<h4 id="干掉它"><a href="#干掉它" class="headerlink" title="干掉它"></a>干掉它</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 生成一个 key 替换配置文件中的 fernet_key</div><div class="line">$ python3 -c &quot;from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())&quot;</div><div class="line"></div><div class="line">$ vi ~/airflow/airflow.cfg</div><div class="line">fernet_key = g3589dfasdfhnht289tghdsfij---dfadfgeu812=</div><div class="line"></div><div class="line">$ airflow initdb</div><div class="line">[2018-10-30 15:31:21,159] &#123;settings.py:174&#125; INFO - setting.configure_orm(): Using pool settings. pool_size=5, pool_recycle=1800</div><div class="line">[2018-10-30 15:31:21,464] &#123;__init__.py:51&#125; INFO - Using executor CeleryExecutor</div><div class="line">DB: mysql://root:***@localhost:3306/airflow</div><div class="line">[2018-10-30 15:31:21,620] &#123;db.py:338&#125; INFO - Creating tables</div><div class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</div><div class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</div><div class="line">Done.</div></pre></td></tr></table></figure>
<h3 id="TypeError-b’5e36be93294a6fea65a4c81571388241b1667fca’-is-not-JSON-serializable"><a href="#TypeError-b’5e36be93294a6fea65a4c81571388241b1667fca’-is-not-JSON-serializable" class="headerlink" title="TypeError: b’5e36be93294a6fea65a4c81571388241b1667fca’ is not JSON serializable"></a>TypeError: b’5e36be93294a6fea65a4c81571388241b1667fca’ is not JSON serializable</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">Ooops.</div><div class="line"></div><div class="line">                          ____/ (  (    )   )  \___</div><div class="line">                         /( (  (  )   _    ))  )   )\</div><div class="line">                       ((     (   )(    )  )   (   )  )</div><div class="line">                     ((/  ( _(   )   (   _) ) (  () )  )</div><div class="line">                    ( (  ( (_)   ((    (   )  .((_ ) .  )_</div><div class="line">                   ( (  )    (      (  )    )   ) . ) (   )</div><div class="line">                  (  (   (  (   ) (  _  ( _) ).  ) . ) ) ( )</div><div class="line">                  ( (  (   ) (  )   (  ))     ) _)(   )  )  )</div><div class="line">                 ( (  ( \ ) (    (_  ( ) ( )  )   ) )  )) ( )</div><div class="line">                  (  (   (  (   (_ ( ) ( _    )  ) (  )  )   )</div><div class="line">                 ( (  ( (  (  )     (_  )  ) )  _)   ) _( ( )</div><div class="line">                  ((  (   )(    (     _    )   _) _(_ (  (_ )</div><div class="line">                   (_((__(_(__(( ( ( |  ) ) ) )_))__))_)___)</div><div class="line">                   ((__)        \\||lll|l||///          \_))</div><div class="line">                            (   /(/ (  )  ) )\   )</div><div class="line">                          (    ( ( ( | | ) ) )\   )</div><div class="line">                           (   /(| / ( )) ) ) )) )</div><div class="line">                         (     ( ((((_(|)_)))))     )</div><div class="line">                          (      ||\(|(|)|/||     )</div><div class="line">                        (        |(||(||)||||        )</div><div class="line">                          (     //|/l|||)|\\ \     )</div><div class="line">                        (/ / //  /|//||||\\  \ \  \ _)</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Node: ubuntu</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1982, in wsgi_app</div><div class="line">    response = self.full_dispatch_request()</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1614, in full_dispatch_request</div><div class="line">    rv = self.handle_user_exception(e)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1517, in handle_user_exception</div><div class="line">    reraise(exc_type, exc_value, tb)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/_compat.py&quot;, line 33, in reraise</div><div class="line">    raise value</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1612, in full_dispatch_request</div><div class="line">    rv = self.dispatch_request()</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/app.py&quot;, line 1598, in dispatch_request</div><div class="line">    return self.view_functions[rule.endpoint](**req.view_args)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 69, in inner</div><div class="line">    return self._run_view(f, *args, **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 368, in _run_view</div><div class="line">    return fn(self, *args, **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_login.py&quot;, line 755, in decorated_view</div><div class="line">    return func(*args, **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/utils/db.py&quot;, line 74, in wrapper</div><div class="line">    return func(*args, **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/views.py&quot;, line 2061, in index</div><div class="line">    auto_complete_data=auto_complete_data)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/base.py&quot;, line 308, in render</div><div class="line">    return render_template(template, **kwargs)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/templating.py&quot;, line 134, in render_template</div><div class="line">    context, ctx.app)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask/templating.py&quot;, line 116, in _render</div><div class="line">    rv = template.render(context)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/environment.py&quot;, line 989, in render</div><div class="line">    return self.environment.handle_exception(exc_info, True)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/environment.py&quot;, line 754, in handle_exception</div><div class="line">    reraise(exc_type, exc_value, tb)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/jinja2/_compat.py&quot;, line 37, in reraise</div><div class="line">    raise value.with_traceback(tb)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/airflow/dags.html&quot;, line 18, in top-level template code</div><div class="line">    &#123;% extends &quot;airflow/master.html&quot; %&#125;</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/airflow/master.html&quot;, line 18, in top-level template code</div><div class="line">    &#123;% extends &quot;admin/master.html&quot; %&#125;</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/admin/master.html&quot;, line 18, in top-level template code</div><div class="line">    &#123;% extends &apos;admin/base.html&apos; %&#125;</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_admin/templates/bootstrap3/admin/base.html&quot;, line 74, in top-level template code</div><div class="line">    &#123;% block tail_js %&#125;</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/airflow/www/templates/admin/master.html&quot;, line 44, in block &quot;tail_js&quot;</div><div class="line">    xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token() &#125;&#125;&quot;);</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/flask_wtf/csrf.py&quot;, line 47, in generate_csrf</div><div class="line">    setattr(g, field_name, s.dumps(session[field_name]))</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/serializer.py&quot;, line 166, in dumps</div><div class="line">    payload = want_bytes(self.dump_payload(obj))</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/url_safe.py&quot;, line 42, in dump_payload</div><div class="line">    json = super(URLSafeSerializerMixin, self).dump_payload(obj)</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/serializer.py&quot;, line 133, in dump_payload</div><div class="line">    return want_bytes(self.serializer.dumps(obj, **self.serializer_kwargs))</div><div class="line">  File &quot;/home/ubuntu/.local/lib/python3.5/site-packages/itsdangerous/_json.py&quot;, line 18, in dumps</div><div class="line">    return json.dumps(obj, **kwargs)</div><div class="line">  File &quot;/usr/lib/python3.5/json/__init__.py&quot;, line 237, in dumps</div><div class="line">    **kw).encode(obj)</div><div class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 198, in encode</div><div class="line">    chunks = self.iterencode(o, _one_shot=True)</div><div class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 256, in iterencode</div><div class="line">    return _iterencode(o, 0)</div><div class="line">  File &quot;/usr/lib/python3.5/json/encoder.py&quot;, line 179, in default</div><div class="line">    raise TypeError(repr(o) + &quot; is not JSON serializable&quot;)</div><div class="line">TypeError: b&apos;5e36be93294a6fea65a4c81571388241b1667fca&apos; is not JSON serializable</div></pre></td></tr></table></figure>
<p>这个错误十分诡异，至今不解，项目运行环境为 <code>Python 3.5.2</code></p>
<p>连首页都进不去，使用的地址为 <code>127.0.0.1:8080</code>，后面尝试把地址修改为 <code>localhost:8080</code> ，就没有这个报错了 Orz</p>
<hr>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p><a href="https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8" target="_blank" rel="external">Airflow: a workflow management platform</a></p>
<p><a href="https://medium.com/videoamp/what-we-learned-migrating-off-cron-to-airflow-b391841a0da4" target="_blank" rel="external">What we learned migrating off Cron to Airflow</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有啥用&quot;&gt;&lt;a href=&quot;#有啥用&quot; class=&quot;headerlink&quot; title=&quot;有啥用&quot;&gt;&lt;/a&gt;有啥用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Airflow&lt;/code&gt; 简单来说就是管理和调度各种离线定时的 Job，用以替代 &lt;code&gt;crontab&lt;/co
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="airflow" scheme="https://amosannn.github.io/tags/airflow/"/>
    
  </entry>
  
  <entry>
    <title>axios 添加登录拦截器后出现 preflight response 错误</title>
    <link href="https://amosannn.github.io/2018/04/02/axios-intercepter-perflight-response-error/"/>
    <id>https://amosannn.github.io/2018/04/02/axios-intercepter-perflight-response-error/</id>
    <published>2018-04-02T08:26:26.000Z</published>
    <updated>2018-04-02T17:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了加强网站安全性，给除了登录注册等特殊页面外的页面路由都加上了访问控制。然后问题就出现了，接口请求没有返回值了！抛了这样一个错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Request header field 8080:1 Authorization is not allowed by Access-Control-Allow-Headers in preflight response</div></pre></td></tr></table></figure>
<p>之前的跨域设置居然不管用了！</p>
<h1 id="挣扎"><a href="#挣扎" class="headerlink" title="挣扎"></a>挣扎</h1><h2 id="分析拦截器代码"><a href="#分析拦截器代码" class="headerlink" title="分析拦截器代码"></a>分析拦截器代码</h2><p>看看这个拦截器代码究竟做了什么！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http request 拦截器</span></div><div class="line">axios.interceptors.request.use(</div><div class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (store.state.token) &#123;  <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></div><div class="line">            config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> config;</div><div class="line">    &#125;,</div><div class="line">    err =&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="comment">// http response 拦截器</span></div><div class="line">axios.interceptors.response.use(</div><div class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;,</div><div class="line">    error =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (error.response) &#123;</div><div class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">401</span>:</div><div class="line">                    <span class="comment">// 返回 401 清除token信息并跳转到登录页面</span></div><div class="line">                    store.commit(types.LOGOUT);</div><div class="line">                    router.replace(&#123;</div><div class="line">                        <span class="attr">path</span>: <span class="string">'login'</span>,</div><div class="line">                        <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</div><div class="line">                    &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)   <span class="comment">// 返回接口返回的错误信息</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>嗯！debugger一波找到原因在第五行，添加了一个新的请求头<code>Authorization</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<p>然而，在前端的请求中并没有看到<code>Authorization</code>这个头。。</p>
<h2 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h2><p>在查看请求详情的时候发现一条重要信息：</p>
<p><img src="../images/options_request.png" alt="options request"></p>
<p>options请求过后没有请求接口，那么就证明是服务端拒绝了访问。</p>
<blockquote>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="external"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 MIME 类型的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="external"><code>POST</code></a> 请求），浏览器必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="external"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="external">Cookies </a>和 HTTP 认证相关数据）。</p>
<p>— 来自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">MDN web docs</a></p>
</blockquote>
<h1 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h1><p>解决的办法也很简单，在服务端的跨域拦截器中给<code>OPTIONS</code>方法放行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新增一个 Authorization 请求头</span></div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept, Authorization"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 放行 OPTIONS 请求方法</span></div><div class="line"><span class="keyword">if</span> (request.getMethod().equals(<span class="string">"OPTIONS"</span>)) &#123;</div><div class="line">  response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务端放行<code>OPTIONS</code>方法后，再次请求，就可以看到同一个请求发送了两次。第一条为 options 方法，第二条请求就是 post 或 get 请求啦，并且在 header 中也可以看到 axios 拦截器设置的 Authorization 了。</p>
<hr>
<p>参考链接</p>
<p><a href="https://github.com/superman66/vue-axios-github" target="_blank" rel="external">axios 登录拦截器</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">Access control CORS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了加强网站安全性，给除了登录注册等特殊页面外的页面路由都加上了访问控制。然后问题就出现了，接口请求没有返回值了！抛了这样一个错误：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://amosannn.github.io/tags/Vue/"/>
    
      <category term="axios" scheme="https://amosannn.github.io/tags/axios/"/>
    
      <category term="CORS" scheme="https://amosannn.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Docker + Nginx 镜像部署 Vue 项目</title>
    <link href="https://amosannn.github.io/2018/03/28/deploy-the-vue-project-using-docker-and-nginx/"/>
    <id>https://amosannn.github.io/2018/03/28/deploy-the-vue-project-using-docker-and-nginx/</id>
    <published>2018-03-28T07:23:57.000Z</published>
    <updated>2018-03-28T17:36:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单介绍-Docker"><a href="#简单介绍-Docker" class="headerlink" title="简单介绍 Docker"></a>简单介绍 Docker</h1><p>Docker 真是个好东西，很好的降低了不同环境发版的兼容性问题。无论是 Linux, Windows 或是 Mac OS，再也不用怕系统环境不同，软件版本不同导致的项目无法启动。这些问题只需要自定义 Docker 镜像，并在 Docker 中启动，就能搞定部署啦。</p>
<h1 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h1><p>传统的部署一般为编译后放在 Nginx 目录下，或者放在 Tomcat 目录下。玩了有一阵子 Docker 了，就试试用 Docker 来部署吧。</p>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>首先给本地的vue项目打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<p>执行命令之后项目根目录下会出现 dist 文件夹，将其上传至服务器。</p>
<h2 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h2><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><p>新建 Dockerfile</p>
<blockquote>
<p>vi Dockerfile</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#导入nginx镜像</div><div class="line">FROM nginx:1.13.7</div><div class="line">MAINTAINER amosannn &lt;amosannn@gmail.com&gt;</div><div class="line">#把当前打包工程的html复制到虚拟地址</div><div class="line">COPY dist/ /usr/share/nginx/html/</div><div class="line">#使用自定义nginx.conf配置端口和监听</div><div class="line">RUN rm /etc/nginx/conf.d/default.conf</div><div class="line">ADD default.conf /etc/nginx/conf.d/</div><div class="line"></div><div class="line">RUN /bin/bash -c &apos;echo init ok!!!&apos;</div></pre></td></tr></table></figure>
<h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>新建<code>default.conf</code></p>
<blockquote>
<p>vi default.conf</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"># 项目中定义的端口号</div><div class="line">    listen       8000; </div><div class="line">    server_name  localhost;</div><div class="line"></div><div class="line">    #charset koi8-r;</div><div class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /usr/share/nginx/html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #error_page  404              /404.html;</div><div class="line"></div><div class="line">    # redirect server error pages to the static page /50x.html</div><div class="line">    #</div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Docker-打包"><a href="#Docker-打包" class="headerlink" title="Docker 打包"></a>Docker 打包</h3><p>打包前项目目录下应该有这几个文件(夹)：<code>default.conf</code>,<code>dist</code>,<code>Dockerfile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t zhiliao:v1 .</div></pre></td></tr></table></figure>
<p>别忘了末尾的小点点</p>
<p>最后出现这两条提示即为打包成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Successfully built 6f656946fde3</div><div class="line">Successfully tagged zhiliao:v1</div></pre></td></tr></table></figure>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p>如果在结果中看到，则为打包成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">zhiliao             latest              c5d9c47be079        17 minutes ago      111MB</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 80:8000 zhiliao:v1</div></pre></td></tr></table></figure>
<p>命令中的<code>-d</code>意为后台运行</p>
<p>-p 为端口号，前半部分为外网访问的端口，后半部分为 Nginx 反向代理寻找的内部端口</p>
<h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure>
<p>这条命令等价于<code>docker container ls</code>，加上 -a 则可显示全部</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_108_54_centos zhiliao-vue]# docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</div><div class="line">bdd5842a4cae        zhiliao:v1          &quot;nginx -g &apos;daemon ...&quot;   42 seconds ago      Exited (1) 41 seconds ago                       frosty_joliot</div></pre></td></tr></table></figure>
<h3 id="查找日志"><a href="#查找日志" class="headerlink" title="查找日志"></a>查找日志</h3><p>如果遇到程序崩溃或者镜像启动失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs &apos;CONTAINER ID&apos;</div></pre></td></tr></table></figure>
<p>使用 ps 命令可以找到到 <code>CONTAINER ID</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_108_54_centos zhiliao-vue]# docker logs bdd5842a4cae</div><div class="line">2018/03/28 07:11:51 [emerg] 1#1: unknown directive &quot;//这里使用项目中的端口号&quot; in /etc/nginx/conf.d/default.conf:3</div><div class="line">nginx: [emerg] unknown directive &quot;//这里使用项目中的端口号&quot; in /etc/nginx/conf.d/default.conf:3</div></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="external">使用 Dockerfile 定制镜像</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单介绍-Docker&quot;&gt;&lt;a href=&quot;#简单介绍-Docker&quot; class=&quot;headerlink&quot; title=&quot;简单介绍 Docker&quot;&gt;&lt;/a&gt;简单介绍 Docker&lt;/h1&gt;&lt;p&gt;Docker 真是个好东西，很好的降低了不同环境发版的兼容性问题。无
    
    </summary>
    
    
      <category term="Vue" scheme="https://amosannn.github.io/tags/Vue/"/>
    
      <category term="Docker" scheme="https://amosannn.github.io/tags/Docker/"/>
    
      <category term="Nginx" scheme="https://amosannn.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>解决Vue前后端分离跨域问题</title>
    <link href="https://amosannn.github.io/2018/03/22/solove-vue-cross-domain-problems/"/>
    <id>https://amosannn.github.io/2018/03/22/solove-vue-cross-domain-problems/</id>
    <published>2018-03-22T01:11:58.000Z</published>
    <updated>2018-03-22T13:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用Vue写了几个页面，发现request传到后端没带上cookies，心想不对劲，Postman明明可以访问啊。再仔细看看，后端已经开放了跨域访问，不需要<code>HttpServletRequest</code>的接口也可以成功请求。一定就是前端请求缺少请求头或是某些参数了。上网查了一下还真是这样，又跳过了一个坑，很开心啦～</p>
<h1 id="前后端跨域设置"><a href="#前后端跨域设置" class="headerlink" title="前后端跨域设置"></a>前后端跨域设置</h1><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><blockquote>
<p>main.js 设置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"></div><div class="line">axios.defaults.withCredentials=<span class="literal">true</span>;</div><div class="line">Vue.prototype.$http = axios;</div></pre></td></tr></table></figure>
<blockquote>
<p>请求需带上withCredentials</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">getData() &#123;</div><div class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">'http://127.0.0.1:8080/xxx/xxxxx'</span>,&#123;</div><div class="line">          <span class="attr">headers</span>: &#123;</div><div class="line">            <span class="string">"Content-Type"</span>:<span class="string">"application/json;charset=utf-8"</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">withCredentials</span> : <span class="literal">true</span></div><div class="line">        &#125;).then( <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">if</span>( response.data.code === <span class="string">'0000'</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.items = response.data.data.xxx;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.items)</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>加上一个跨域用Interceptor</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">      Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);</div><div class="line">    response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</div><div class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, X-Requested-With, Content-Type, Accept"</span>);</div><div class="line">    response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>,<span class="string">"true"</span>); <span class="comment">//是否允许浏览器携带用户身份信息（cookie）</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div></pre></td></tr></table></figure>
<p>请求源地址如果写了<code>*</code>很可能会被拒绝访问。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to load http://127.0.0.1:8080/zhiliao/login: Response to preflight request doesn&apos;t pass access control check: The value of the &apos;Access-Control-Allow-Origin&apos; header in the response must not be the wildcard &apos;*&apos; when the request&apos;s credentials mode is &apos;include&apos;. Origin &apos;http://127.0.0.1:8000&apos; is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</div></pre></td></tr></table></figure>
<p>如果出现这样的报错，那就得指定地址啦！    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:8000&quot;);</div></pre></td></tr></table></figure>
<p>这里依旧有个小坑：指定地址为<code>http://127.0.0.1:8000</code>的时候前端页面若是<code>localhost</code>是无法访问的。</p>
<h1 id="看看axios官方文档"><a href="#看看axios官方文档" class="headerlink" title="看看axios官方文档"></a>看看axios官方文档</h1><p><a href="https://github.com/axios/axios#request-config" target="_blank" rel="external">axios官方配置说明</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// `timeout` specifies the number of milliseconds before the request times out.</div><div class="line">// If the request takes longer than `timeout`, the request will be aborted.</div><div class="line">timeout: 1000,</div><div class="line"></div><div class="line">// `withCredentials` indicates whether or not cross-site Access-Control requests</div><div class="line">// should be made using credentials</div><div class="line">withCredentials: false, // default</div><div class="line"></div><div class="line">// `adapter` allows custom handling of requests which makes testing easier.</div><div class="line">// Return a promise and supply a valid response (see lib/adapters/README.md).</div><div class="line">adapter: function (config) &#123;</div><div class="line">  /* ... */</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>配置文件中<code>withCredentials</code>默认是关闭的，手动修改配置文件或在项目中重定义即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;用Vue写了几个页面，发现request传到后端没带上cookies，心想不对劲，Postman明明可以访问啊。再仔细看看，后端已经开放了跨
    
    </summary>
    
    
      <category term="Vue" scheme="https://amosannn.github.io/tags/Vue/"/>
    
      <category term="CORS" scheme="https://amosannn.github.io/tags/CORS/"/>
    
      <category term="SpringBoot" scheme="https://amosannn.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>什么是分布式事务</title>
    <link href="https://amosannn.github.io/2018/03/19/simple-to-understand-transaction/"/>
    <id>https://amosannn.github.io/2018/03/19/simple-to-understand-transaction/</id>
    <published>2018-03-19T09:27:21.000Z</published>
    <updated>2018-03-19T18:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单说一下事务"><a href="#简单说一下事务" class="headerlink" title="简单说一下事务"></a>简单说一下事务</h1><p>事务就是单个逻辑执行的一系列操作，要么全部成功，要么全部失败。<br>事务包含4个特性（<strong>ACID</strong>）：</p>
<ol>
<li>Atomicity（原子性）：事务中包含的所有操作要么全做，要么全不做。</li>
<li>Consistency（一致性）：事务开始以前，数据库处于一致性的状态，事务结束后，数据库也必须处于一致性的状态。</li>
<li>Isolation（隔离性）：系统必须保证事务不受其他并发执行的事务的影响。</li>
<li>Durability（持久性）：一个事务一旦成功完成，它对数据库的改变必须是永久的，即使是在系统遇到故障的情况下也不会丢失。</li>
</ol>
<h1 id="假如没有事务"><a href="#假如没有事务" class="headerlink" title="假如没有事务"></a>假如没有事务</h1><p>我们以银行的ATM机为例子：</p>
<p>取款操作一般为两个核心步骤：</p>
<ol>
<li>余额扣除相应金额</li>
<li>ATM机吐钞</li>
</ol>
<p>如果金额扣除了，而ATM机却因某些原因无法吐钞，那用户就崩溃了。而若是金额没扣除，ATM却吐钞了，那就是银行崩溃了。所以事务（分布式）的重要性在这里就体现的淋漓尽致了，这也正是事务中的一致性。</p>
<h1 id="说说分布式事务"><a href="#说说分布式事务" class="headerlink" title="说说分布式事务"></a>说说分布式事务</h1><p>分布式事务的体现有很多种，其中最具代表性的是由Oracle Tuxedo系统提出的XA分布式事务协议。</p>
<p>XA协议包含<strong>两阶段提交（2PC）</strong>和<strong>三阶段提交（3PC</strong>两种实现。</p>
<h2 id="两阶段提交（2PC）"><a href="#两阶段提交（2PC）" class="headerlink" title="两阶段提交（2PC）"></a>两阶段提交（2PC）</h2><p>两阶段提交就像支持多人游戏的网游游戏模式（可参考近日火热的PUBG）。</p>
<p>在游戏开始前，一个队伍中会有两种角色，队长与队员，也分别对应着<strong>事务协调者</strong>与<strong>事务参与者</strong>。</p>
<h3 id="正向流程"><a href="#正向流程" class="headerlink" title="正向流程"></a>正向流程</h3><p>一个XA两阶段提交的正向流程分为这两阶段：</p>
<blockquote>
<p>第一阶段：</p>
</blockquote>
<ol>
<li>以发送邀请的玩家A为首，邀请到了呵自己开黑的小伙伴B、C、D进入队伍，并请求他们点击准备按钮。</li>
<li>小伙伴 B、C、D 全部准备就绪。</li>
</ol>
<blockquote>
<p>第二阶段：</p>
</blockquote>
<ol>
<li>A 大吼一声，「伞兵一号准备就绪！」随即点击开始游戏。</li>
<li>A 首先进入游戏，等待 B、C、D片刻后，大家都成功进入游戏地图。</li>
</ol>
<p>对应到正经的XA中是这样的：</p>
<blockquote>
<p>第一阶段：</p>
</blockquote>
<ol>
<li><p>协调者向参与者们发送Prepare请求</p>
</li>
<li><p>参与者们各自执行自己与事务有关的数据更新，写入Undo Log和Redo Log。如果参与者执行成功，暂时不提交事务，而是向事务协调节点返回“Done”消息。</p>
<p>当事务协调者接到了所有参与者的返回消息，整个分布式事务将会进入第二阶段。</p>
</li>
</ol>
<blockquote>
<p>第二阶段：</p>
</blockquote>
<ol>
<li>如果事务协调节点在之前所收到都是正向返回，那么它将会向所有事务参与者发出Commit请求。</li>
<li>接到Commit请求之后，事务参与者节点会各自进行本地的事务提交，并释放锁资源。当本地事务完成提交后，将会向事务协调者返回“ACK”消息。</li>
<li>事务协调者接收到所有事务参与者的“完成”反馈，整个分布式事务完成。</li>
</ol>
<h3 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h3><ol>
<li>如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</li>
<li>于是在第二阶段，事务协调节点向所有的事务参与者发送Abort请求。接收到Abort请求之后，各个事务参与者节点需要在本地进行事务的回滚操作，回滚操作依照Undo Log来进行。</li>
</ol>
<h2 id="XA两阶段提交的不足"><a href="#XA两阶段提交的不足" class="headerlink" title="XA两阶段提交的不足"></a>XA两阶段提交的不足</h2><blockquote>
<p>性能问题</p>
</blockquote>
<p>XA协议遵循强一致性。在事务执行过程中，各个节点占用着数据库资源，只有当所有节点准备完毕，事务协调者才会通知提交，参与者提交后释放资源。这样的过程有着非常明显的性能问题。</p>
<blockquote>
<p>协调者单点故障问题</p>
</blockquote>
<p>事务协调者是整个XA模型的核心，一旦事务协调者节点挂掉，参与者收不到提交或是回滚通知，参与者会一直处于中间状态无法完成事务。</p>
<blockquote>
<p>丢失消息导致的不一致问题</p>
</blockquote>
<p>在XA协议的第二个阶段，如果发生局部网络问题，一部分事务参与者收到了提交消息，另一部分事务参与者没收到提交消息，那么就导致了节点之间数据的不一致。</p>
<h3 id="如何避免XA两阶段提交的种种问题"><a href="#如何避免XA两阶段提交的种种问题" class="headerlink" title="如何避免XA两阶段提交的种种问题"></a>如何避免XA两阶段提交的种种问题</h3><p>有许多其他的分布式事务方案可供选择：</p>
<blockquote>
<p>XA三阶段提交</p>
</blockquote>
<p>XA三阶段提交在两阶段提交的基础上增加了CanCommit阶段，并且引入了超时机制。一旦事物参与者迟迟没有接到协调者的commit请求，会自动进行本地commit。这样有效解决了协调者单点故障的问题。但是性能问题和不一致的问题仍然没有根本解决。</p>
<blockquote>
<p>MQ事务</p>
</blockquote>
<p>利用消息中间件来异步完成事务的后一半更新，实现系统的最终一致性。这个方式避免了像XA协议那样的性能问题。</p>
<blockquote>
<p>TCC事务</p>
</blockquote>
<p>TCC事务是Try、Commit、Cancel三种指令的缩写，其逻辑模式类似于XA两阶段提交，但是实现方式是在代码层面来人为实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单说一下事务&quot;&gt;&lt;a href=&quot;#简单说一下事务&quot; class=&quot;headerlink&quot; title=&quot;简单说一下事务&quot;&gt;&lt;/a&gt;简单说一下事务&lt;/h1&gt;&lt;p&gt;事务就是单个逻辑执行的一系列操作，要么全部成功，要么全部失败。&lt;br&gt;事务包含4个特性（&lt;stron
    
    </summary>
    
    
      <category term="Transaction" scheme="https://amosannn.github.io/tags/Transaction/"/>
    
      <category term="SQL" scheme="https://amosannn.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis一对一映射注解@One的使用及理解</title>
    <link href="https://amosannn.github.io/2018/03/08/the-use-and-understanding-of-one-annotated-by-mybatis/"/>
    <id>https://amosannn.github.io/2018/03/08/the-use-and-understanding-of-one-annotated-by-mybatis/</id>
    <published>2018-03-08T12:32:21.000Z</published>
    <updated>2018-03-08T23:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本着更深入地使用注解来开发，慢慢地发现脱离了XML的MyBatis好多好多的坑。我觉得很大的原因还是来自于官方文档的不完善，以及使用注解开发持久层的人并不多见，导致网络上的相关讨论过于贫瘠并重复化，毕竟对于复杂查询的支持，我认为还没有在XML里写一条SQL方便呢～  </p>
<p>所以这篇文章用于补充一语带过的官方文档，记录下自己趟过的坑。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h2><p>注解化一对一映射其实就是将XML中的<code>ResultType</code>属性对应的实体写在<code>@Results</code>注解中。其中的<code>@Result</code>填入实体的属性，而若该属性为实体中的实体，则需要@One注解引入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Select</span>(<span class="string">"select answer_id, answer_content, liked_count, create_time, question_id, user_id from answer where create_time &gt; #&#123;createTime&#125; order by liked_count desc, create_time desc limit 0,10"</span>)</div><div class="line"><span class="meta">@Results</span>(&#123;</div><div class="line">    <span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"answer_id"</span>, property = <span class="string">"answerId"</span>, javaType = Integer.class),</div><div class="line">    <span class="meta">@Result</span>(column = <span class="string">"answer_content"</span>, property = <span class="string">"answerContent"</span>),</div><div class="line">    <span class="meta">@Result</span>(column = <span class="string">"liked_count"</span>, property = <span class="string">"likedCount"</span>, javaType = Integer.class, jdbcType = JdbcType.INTEGER),</div><div class="line">    <span class="meta">@Result</span>(column = <span class="string">"create_time"</span>, property = <span class="string">"createTime"</span>),</div><div class="line">    <span class="meta">@Result</span>(column = <span class="string">"question_id"</span>, property = <span class="string">"question"</span>, javaType = Question.class,</div><div class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectQuestionById"</span>)),</div><div class="line">    <span class="meta">@Result</span>(column = <span class="string">"user_id"</span>, property = <span class="string">"user"</span>,</div><div class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectUserById"</span>))</div><div class="line">&#125;)</div><div class="line"><span class="function">List&lt;Answer&gt; <span class="title">listAnswerByCreateTime</span><span class="params">(@Param(<span class="string">"createTime"</span>)</span> <span class="keyword">long</span> createTime)</span>;</div></pre></td></tr></table></figure>
<p>值得注意的是，映射中的<code>property</code>属性的值不可和其他实体属性一样，应该填写所返回的实体名称。</p>
<p>例如下面代码，我返回的实体为<code>Answer</code>类下的<code>Question</code>类，则<code>property</code>中不可写<code>questionId</code>，而得写<code>question</code>。同时@One中select属性对应的方法若在不同类，则需要写出完整的包名（com.xxx.xxx.getxxxByxx）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Result</span>(column = <span class="string">"question_id"</span>, property = <span class="string">"question"</span>, javaType = Question.class,</div><div class="line">        one = <span class="meta">@One</span>(select = <span class="string">"selectQuestionById"</span>))</div></pre></td></tr></table></figure>
<p>需要注意的是，从@One传递过来的查询条件也需要在主查询语句中查询出来，也就是上面的<code>listAnswerByCreateTime</code>方法需要查询出question_id和user_id，千万别漏了。否则报你错哦！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Select</span>(<span class="string">"select question_id, question_title from question where question_id = #&#123;questionId&#125;"</span>)</div><div class="line"><span class="meta">@ResultType</span>(Question.class)</div><div class="line"><span class="function">Question <span class="title">selectQuestionById</span><span class="params">(@Param(<span class="string">"questionId"</span>)</span> Integer questionId)</span>;</div><div class="line"></div><div class="line"><span class="meta">@Select</span>(<span class="string">"select user_id, username, avatar_url, simple_desc from user where user_id = #&#123;userId&#125;"</span>)</div><div class="line"><span class="meta">@ResultType</span>(User.class)</div><div class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(@Param(<span class="string">"userId"</span>)</span> Integer userId)</span>;</div></pre></td></tr></table></figure>
<p>由此查询得出的结果集为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">"answerList": [</div><div class="line">            &#123;</div><div class="line">                "answerId": 42,</div><div class="line">                "answerContent": "这是回答！",</div><div class="line">                "likedCount": 3,</div><div class="line">                "createTime": 1520508016650,</div><div class="line">                "userId": null,</div><div class="line">                "questionId": null,</div><div class="line">                "likeState": null,</div><div class="line">                "commentCount": null,</div><div class="line">                "question": &#123;</div><div class="line">                    "questionId": 1,</div><div class="line">                    "questionTitle": "Spring，Django，Rails，Express这些框架技术的出现都是为了解决什么问题，现在这些框架都应用在哪些方面？",</div><div class="line">                    "createTime": null,</div><div class="line">                    "userId": null,</div><div class="line">                    "user": null</div><div class="line">                &#125;,</div><div class="line">                "user": &#123;</div><div class="line">                    "userId": 11218,</div><div class="line">                    "weiboUserId": null,</div><div class="line">                    "email": null,</div><div class="line">                    "username": "amosamos",</div><div class="line">                    "password": null,</div><div class="line">                    "joinTime": null,</div><div class="line">                    "avatarUrl": "https://avatars3.githubusercontent.com/u/16012509?s=400&amp;u=6fe0dd08943216aeff2d3c9d1b8c3e602f6de8e9&amp;v=4"</div><div class="line">                &#125;,</div><div class="line">                "answerCommentList": null</div><div class="line">            &#125;</div><div class="line">        ]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本着更深入地使用注解来开发，慢慢地发现脱离了XML的MyBatis好多好多的坑。我觉得很大的原因还是来自于官方文档的不完善，以及使用注解开发
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://amosannn.github.io/tags/SpringBoot/"/>
    
      <category term="MyBatis" scheme="https://amosannn.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>在SelectProvider注解中使用复杂类型参数（List）</title>
    <link href="https://amosannn.github.io/2018/03/03/SelectProvider-use-List-parameter/"/>
    <id>https://amosannn.github.io/2018/03/03/SelectProvider-use-List-parameter/</id>
    <published>2018-03-03T15:50:39.000Z</published>
    <updated>2018-03-04T00:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发中尝试使用注解来代替xml完成Mybatis的sql编写，实现更完(装)整(逼)的无xml编程。结果没写多久就跌进大坑了Orz</p>
<p>总所周知的是Mybatis支持的注解中有@Select、@Insert、@Update、@Delete这四个基本操作。使用这些注解你可以非常快的完成基础操作，如果想执行一些复杂操作，例如包含where、foreach等xml中一个标签即可完成的操作，便需要用到另一个注解 –&gt; @SelectProvider</p>
<p>如果你的需求只是传递一些基础类型，那你学习使用SelectProvider的曲线还是很平滑的。如果你的需求是传递一些复杂类型，例如List，那就可能会尴尬了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuestionMapper</span> </span>&#123;</div><div class="line">  <span class="meta">@SelectProvider</span>(type = QuestionSqlProvider.class, method = <span class="string">"listQuestionByQuestionId"</span>)</div><div class="line">  <span class="function">List&lt;Question&gt; <span class="title">listQuestionByQuestionId</span><span class="params">(@Param(<span class="string">"idList"</span>)</span> List&lt;Integer&gt; idList)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一开始我理所当然的把List<integer>作为输入参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; idList)</span> </span>&#123;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    sb.append(<span class="string">"("</span>);</div><div class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</div><div class="line">      sb.append(<span class="string">" '"</span> + questionId + <span class="string">"',"</span>);</div><div class="line">    &#125;</div><div class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">    sb.append(<span class="string">")"</span>);</div><div class="line">    System.out.println(sb.toString());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</div><div class="line">      SELECT(<span class="string">" question_id,question_title,create_time "</span>);</div><div class="line">      FROM(<span class="string">" question "</span>);</div><div class="line">      WHERE(<span class="string">" question_id in "</span> + sb.toString());</div><div class="line">    &#125;&#125;.toString();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></integer></p>
<p>燃鹅。。jvm很无情的抛了个错误出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">00:29:39.814 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Could not complete request</div><div class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.builder.BuilderException: Error invoking SqlProvider method (com.amosannn.mapper.QuestionSqlProvider.listQuestionByQuestionId).  Cause: org.apache.ibatis.binding.BindingException: Parameter &apos;arg0&apos; not found. Available parameters are [idList, param1]</div></pre></td></tr></table></figure></p>
<p>很难受，Mybatis的官方文档里并没有针对@SelectProvider有更多的demo，翻遍了各大门户网站也没见到有相关的讨论。兜兜转转依旧没有眉目，想到多参数的传递会被Mybatis自动封装进Map，该不会List也是同样被封装进Map吧。结果一试还真是这样。。</p>
<p>终于摸索出问题的关键，只需把形参由List<integer>类型替换为Map类型就能接收到前面传来的List了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionSqlProvider</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">listQuestionByQuestionId</span><span class="params">(<span class="keyword">final</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; idList = (List&lt;Integer&gt;)map.get(<span class="string">"idList"</span>);</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    sb.append(<span class="string">"("</span>);</div><div class="line">    <span class="keyword">for</span> (Integer questionId : idList) &#123;</div><div class="line">      sb.append(<span class="string">" '"</span> + questionId + <span class="string">"',"</span>);</div><div class="line">    &#125;</div><div class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">    sb.append(<span class="string">")"</span>);</div><div class="line">    System.out.println(sb.toString());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL() &#123;&#123;</div><div class="line">      SELECT(<span class="string">" question_id,question_title,create_time "</span>);</div><div class="line">      FROM(<span class="string">" question "</span>);</div><div class="line">      WHERE(<span class="string">" question_id in "</span> + sb.toString());</div><div class="line">    &#125;&#125;.toString();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></integer></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开发中尝试使用注解来代替xml完成Mybatis的sql编写，实现更完(装)整(逼)的无xml编程。结果没写多久就跌进大坑了Orz&lt;/p&gt;
&lt;p&gt;总所周知的是Mybatis支持的注解中有@Select、@Insert、@Update、@Delete这四个基本操作。使用这
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://amosannn.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>JedisPool报错：Could not return the resource to the pool</title>
    <link href="https://amosannn.github.io/2018/01/30/jedispool-could-not-return-resource-error/"/>
    <id>https://amosannn.github.io/2018/01/30/jedispool-could-not-return-resource-error/</id>
    <published>2018-01-30T07:08:45.000Z</published>
    <updated>2018-01-30T15:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bug的起源和解法"><a href="#Bug的起源和解法" class="headerlink" title="Bug的起源和解法"></a>Bug的起源和解法</h1><p>这个错误来的实在猝不及防，第一次请求可以成功使用<code>JedisPool</code>，而第二次请求便会报错，在翻遍了所有相关博客后一度以为是自己的配置出了错，于是不断修改配置文件中的redis连接池参数。<br>折腾老半天之后，没有帮助TAT<br>这时，我想起10年前的某个午后，蝉鸣的空气中传来的几分安定，出神地趴在窗边看麻雀扑腾的我，被一声厉呵带回现实。之后便到了标准环节–”下课到办公室找我”。之后的事情便记不太清了，只是我深深地记得当时的心境，想不出的问题换个角度想，一定会有不同的发现。<br>那就回归报错吧，“无法将资源返回到池”，再回想到我的jedisPool对象，旷的一声，仿佛天旋地转一般，一切的一切突然都变透彻了。</p>
<h2 id="错误根源及出错原因"><a href="#错误根源及出错原因" class="headerlink" title="错误根源及出错原因"></a>错误根源及出错原因</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">followUser</span><span class="params">(Integer localUserId, Integer userId)</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> (Jedis jedis = jedisPool.getResource()) &#123;</div><div class="line">    jedis.zadd(localUserId + RedisKey.FOLLOW_USER, System.currentTimeMillis(),</div><div class="line">        String.valueOf(userId));</div><div class="line">    jedis.zadd(userId + RedisKey.FOLLOWED_USER, System.currentTimeMillis(),</div><div class="line">        String.valueOf(localUserId));</div><div class="line">  &#125; <span class="keyword">catch</span> (JedisException e) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">  jedisPool.close();<span class="comment">// 问题就出在这里</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JedisPool在configuration类中初始化（项目启动时有spring自动扫描）<br>然而在每个业务类调用完之后就被手动关闭，自然执行完第一次后就不再能取出resource的，也无法return。<br>解决这个bug只需把每个service实现类中的<code>jedisPool.close()</code>删去即可。</p>
<h2 id="为什么会出现这种写法"><a href="#为什么会出现这种写法" class="headerlink" title="为什么会出现这种写法"></a>为什么会出现这种写法</h2><p>说到这个就不得不提起Jedis的wiki<br>官方po出的demo是这样使用jedis的：  </p>
<h3 id="首先引入pom"><a href="#首先引入pom" class="headerlink" title="首先引入pom"></a>首先引入pom</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.9.0&lt;/version&gt;</div><div class="line">    &lt;type&gt;jar&lt;/type&gt;</div><div class="line">    &lt;scope&gt;compile&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="然后实例化JedisPool"><a href="#然后实例化JedisPool" class="headerlink" title="然后实例化JedisPool"></a>然后实例化JedisPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), <span class="string">"localhost"</span>);</div></pre></td></tr></table></figure>
<h3 id="接着实例化jedis有两种方法"><a href="#接着实例化jedis有两种方法" class="headerlink" title="接着实例化jedis有两种方法"></a>接着实例化jedis有两种方法</h3><ol>
<li><p>try-with-resource法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Jedis implements Closeable. Hence, the jedis instance will be auto-closed after the last statement.</span></div><div class="line"><span class="keyword">try</span> (Jedis jedis = pool.getResource()) &#123;</div><div class="line">  <span class="comment">/// ... do stuff here ... for example</span></div><div class="line">  jedis.set(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</div><div class="line">  String foobar = jedis.get(<span class="string">"foo"</span>);</div><div class="line">  jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"car"</span>); jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"bike"</span>); </div><div class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">"sose"</span>, <span class="number">0</span>, -<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/// ... when closing your application:</span></div><div class="line">pool.close();<span class="comment">// 这便是原罪</span></div></pre></td></tr></table></figure>
</li>
<li><p>手动关闭jedis法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Jedis jedis = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  jedis = pool.getResource();</div><div class="line">  <span class="comment">/// ... do stuff here ... for example</span></div><div class="line">  jedis.set(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</div><div class="line">  String foobar = jedis.get(<span class="string">"foo"</span>);</div><div class="line">  jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"car"</span>); jedis.zadd(<span class="string">"sose"</span>, <span class="number">0</span>, <span class="string">"bike"</span>); </div><div class="line">  Set&lt;String&gt; sose = jedis.zrange(<span class="string">"sose"</span>, <span class="number">0</span>, -<span class="number">1</span>);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="comment">// You have to close jedis object. If you don't close then</span></div><div class="line">  <span class="comment">// it doesn't release back to pool and you can't get a new</span></div><div class="line">  <span class="comment">// resource from pool.</span></div><div class="line">  <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">    jedis.close();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/// ... when closing your application:</span></div><div class="line">pool.close();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>虽然不在报错了，但是现在不关的话又不知道在哪能关的了它了。。。</p>
<hr>
<p>双手奉上： <a href="https://github.com/xetorthio/jedis/wiki/Getting-started" target="_blank" rel="external">Jedis官方指引</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bug的起源和解法&quot;&gt;&lt;a href=&quot;#Bug的起源和解法&quot; class=&quot;headerlink&quot; title=&quot;Bug的起源和解法&quot;&gt;&lt;/a&gt;Bug的起源和解法&lt;/h1&gt;&lt;p&gt;这个错误来的实在猝不及防，第一次请求可以成功使用&lt;code&gt;JedisPool&lt;/c
    
    </summary>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
      <category term="jedis" scheme="https://amosannn.github.io/tags/jedis/"/>
    
      <category term="redis" scheme="https://amosannn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发路上遇到的坑儿们</title>
    <link href="https://amosannn.github.io/2018/01/24/vue-error-collection/"/>
    <id>https://amosannn.github.io/2018/01/24/vue-error-collection/</id>
    <published>2018-01-24T02:52:06.000Z</published>
    <updated>2018-01-24T11:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>此文仅用于记录vue开发中遇到的各种奇葩事。</p>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="项目不报错但是路由不加载"><a href="#项目不报错但是路由不加载" class="headerlink" title="项目不报错但是路由不加载"></a>项目不报错但是路由不加载</h2><p>前方预警：这是个低级错误Orz<br>index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      name: &apos;Index&apos;,</div><div class="line">      component: &#123;</div><div class="line">        nav: Navv,</div><div class="line">        main: Index,</div><div class="line">        footer: Footter</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>App.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;router-view name=&quot;nav&quot;&gt;&lt;/router-view&gt;</div><div class="line">    &lt;router-view name=&quot;main&quot;&gt;&lt;/router-view&gt;</div><div class="line">    &lt;router-view name=&quot;footer&quot;&gt;&lt;/router-view&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<p>如果你和我一样是只小白菜，可能咋一看会发现没什么毛病，仔细一看就会发现路由配置里的<code>components</code>被我写成了·component·。。<br>vue中到目前为止我知道的两种路由配置方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 第一种</div><div class="line">...</div><div class="line">component: navv</div><div class="line">...</div><div class="line">// 第二种</div><div class="line">components: &#123;</div><div class="line">	navv</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>over, 经验值 +1</p>
<h2 id="Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name"><a href="#Failed-to-execute-‘setAttribute’-on-‘Element’-‘method-’-is-not-a-valid-attribute-name" class="headerlink" title="Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name."></a>Failed to execute ‘setAttribute’ on ‘Element’: ‘method+’ is not a valid attribute name.</h2><p>由于项目中引入了饿了么开发的组件库·element-ui·，所以一度以为是和我引入的css文件起了冲突？？甚至我还去执行了<code>npm uninstall element-ui</code>这条命令。最后实在没办法了，一段一段代码排查问题，找到一个诡异的地方。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/listTopic&quot; method+=&quot;post&quot;&gt;</div><div class="line">  &lt;input name=&quot;topicName&quot; type=&quot;text&quot; class=&quot;search-input&quot; placeholder=&quot;搜索你感兴趣的内容...&quot;&gt;</div><div class="line">  &lt;button type=&quot;submit&quot; class=&quot;search-button&quot;&gt;&lt;i class=&quot;sprite-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>噗。。form标签下的method方法多了个+号。。。想拿头去撞豆腐了。<br>ok，经验值 +1</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h1&gt;&lt;p&gt;此文仅用于记录vue开发中遇到的各种奇葩事。&lt;/p&gt;
&lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="vue" scheme="https://amosannn.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何删除自己安装的python(干净、无残留)</title>
    <link href="https://amosannn.github.io/2017/12/24/remove-your-own-python/"/>
    <id>https://amosannn.github.io/2017/12/24/remove-your-own-python/</id>
    <published>2017-12-24T13:27:15.000Z</published>
    <updated>2017-12-24T22:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又折腾起了python，于是发现很久以前的自己在各个地方留下了python的足迹，简直就是个更新日志。。<br>既然习惯了brew这个管家，那就把以前的坑都填好吧！</p>
<p>安装软件的时候很快活，卸载的时候就难受的不行，不熟悉系统目录，你就根本卸不干净。<br>当然市面上有很多pkg卸载软件，但是强迫症的自己总觉得它卸不干净~。~</p>
<p>搜了一票国内论坛。。还是跑去StackOverFlow，找到了一个靠谱回答。<br>答主提供了python官网的反馈页面，是一位不知如何完整卸载python的网友提交的反馈。<br>一个叫<code>Ned Deily</code>的朋友提取了安装目录并将其制成卸载脚本（详情见参考链接）<br>知道了该删哪就可以动手了…</p>
<a id="more"></a>
<ol>
<li><p>python框架</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /Library/Frameworks/Python.framework/Versions/x.x</div></pre></td></tr></table></figure>
</li>
<li><p>python应用目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf &quot;/Applications/Python x.x&quot;</div></pre></td></tr></table></figure>
</li>
<li><p><code>/usr/local/bin</code>下的软连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/bin/</div><div class="line">ls -l /usr/local/bin | grep &apos;../Library/Frameworks/Python.framework/Versions/x.x&apos; | awk &apos;&#123;print $9&#125;&apos; | tr -d @ | xargs rm</div><div class="line"># 如果想检查一下有没有删干净</div><div class="line">ls -l /usr/local/bin | grep &apos;../Library/Frameworks/Python.framework/Versions/x.x&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>若有环境变量等系统配置文件的配置，需另行手动删除</p>
<ul>
<li>~/.bash_login</li>
<li>~/.bash_profile</li>
<li>~/.cshrc</li>
<li>~/.profile</li>
<li>~/.tcshrc</li>
<li>~/.zprofile</li>
</ul>
</li>
</ol>
<p>以上的<code>x.x</code>都为python版本号，自行替换即可。</p>
<hr>
<p>参考链接：<br><a href="https://bugs.python.org/issue7107" target="_blank" rel="external">Python Bug Tracker</a><br><a href="https://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4/3819829#3819829" target="_blank" rel="external">How to uninstall Python 2.7 on a Mac OS X 10.6.4?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又折腾起了python，于是发现很久以前的自己在各个地方留下了python的足迹，简直就是个更新日志。。&lt;br&gt;既然习惯了brew这个管家，那就把以前的坑都填好吧！&lt;/p&gt;
&lt;p&gt;安装软件的时候很快活，卸载的时候就难受的不行，不熟悉系统目录，你就根本卸不干净。&lt;br&gt;当然市面上有很多pkg卸载软件，但是强迫症的自己总觉得它卸不干净~。~&lt;/p&gt;
&lt;p&gt;搜了一票国内论坛。。还是跑去StackOverFlow，找到了一个靠谱回答。&lt;br&gt;答主提供了python官网的反馈页面，是一位不知如何完整卸载python的网友提交的反馈。&lt;br&gt;一个叫&lt;code&gt;Ned Deily&lt;/code&gt;的朋友提取了安装目录并将其制成卸载脚本（详情见参考链接）&lt;br&gt;知道了该删哪就可以动手了…&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://amosannn.github.io/tags/mac/"/>
    
      <category term="python" scheme="https://amosannn.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis从安装到踩坑</title>
    <link href="https://amosannn.github.io/2017/11/29/redis-install/"/>
    <id>https://amosannn.github.io/2017/11/29/redis-install/</id>
    <published>2017-11-29T08:13:02.000Z</published>
    <updated>2017-12-24T22:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>先贴Redis官网：<a href="https://redis.io/download" target="_blank" rel="external">https://redis.io/download</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz</div><div class="line">$ tar xzf redis-4.0.2.tar.gz</div><div class="line">$ cd redis-4.0.2</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>如果没有安装gcc，则会抛出这样的错误：<br><img src="/images/redis_install/redis_install_error.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install gcc</div></pre></td></tr></table></figure></p>
<p>在执行一次make可能会再抛出这样一个错误：<br><img src="/images/redis_install/redis_install_error2.png" alt=""></p>
<p>这样的话便在make后加上参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make MALLOC=libc</div></pre></td></tr></table></figure></p>
<p>编译完成后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ src/redis-server  redis.conf</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>当看到这个画面redis就启动完成了<br><img src="/images/redis_install/redis_running.png" alt=""></p>
<p>新建一个链接（开启新的终端或新的ssh标签页）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/redis-4.0.2</div><div class="line">$ src/redis-cli</div></pre></td></tr></table></figure></p>
<p><img src="/images/redis_install/redis_test.png" alt=""><br>至此大功告成，如果想学习redis命令，则点击：xxx.xxx/xxx</p>
<p>二：redis开启外部访问<br>远程连接redis访问被拒绝，初步推断为redis配置问题。<br>开了另一台服务器redis-cli远程连接，发现如下错误<br><img src="/images/redis_install/denied_of_protected_mode.png" alt=""><br>由图中可知，要想外部访问当前redis服务，需关闭安全模式。</p>
<p>关闭安全模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi redis.conf</div><div class="line"># 更改protected-mode 由yes 改成 no</div></pre></td></tr></table></figure></p>
<p>关闭并重启后发现依旧访问被拒。<br><img src="/images/redis_install/denied_of_127_binded.png" alt=""></p>
<p>一波操作之后发现，需修改默认配置文件中的bind配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 更改 bind 127.0.0.1 为 bind 0.0.0.0</div><div class="line"># 重启redis后便可使用cmd或terminal测试连接</div><div class="line"></div><div class="line">$ redis-cli -h &#123;redis_host&#125; -p &#123;redis_port&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>{redis_host}</code>就是远程的Redis服务所在服务器地址，<code>{redis_port}</code>就是Redis服务端口（默认端口为6379）。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@VM_77_16_centos src]# ./redis-cli -h 你的ip -p 6379</div></pre></td></tr></table></figure></p>
<p>大功告成<br><img src="/images/redis_install/external_access_success.png" alt=""></p>
<p>三：redis的基本操作<br>关闭redis的两种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 无密码</div><div class="line"># redis-cli shutdown</div><div class="line"></div><div class="line"># 有密码</div><div class="line"># redis-cli -a password shutdown</div><div class="line"></div><div class="line"># 查询redis的pid，关闭进程</div><div class="line"># ps aux | grep redis</div><div class="line"># kill -9 pid</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先贴Redis官网：&lt;a href=&quot;https://redis.io/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://redis.io/download&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tar xzf redis-4.0.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd redis-4.0.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ make&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有安装gcc，则会抛出这样的错误：&lt;br&gt;&lt;img src=&quot;/images/redis_install/redis_install_error.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ yum install gcc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在执行一次make可能会再抛出这样一个错误：&lt;br&gt;&lt;img src=&quot;/images/redis_install/redis_install_error2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的话便在make后加上参数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ make MALLOC=libc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译完成后&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ src/redis-server  redis.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从Terminal过渡到Item2</title>
    <link href="https://amosannn.github.io/2017/11/05/intalled-item2/"/>
    <id>https://amosannn.github.io/2017/11/05/intalled-item2/</id>
    <published>2017-11-04T17:25:27.000Z</published>
    <updated>2017-11-05T22:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直听说item2是个比terminal强大的终端工具，为了提升命令行的体验，从teminal切换到了item2。</p>
<h2 id="下载Item2"><a href="#下载Item2" class="headerlink" title="下载Item2"></a>下载Item2</h2><p><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="external">https://www.iterm2.com/downloads.html</a></p>
<h2 id="设置开启快捷键"><a href="#设置开启快捷键" class="headerlink" title="设置开启快捷键"></a>设置开启快捷键</h2><p>前提是item2在后台运行<br>-&gt; 进入preference(command ,)<br>-&gt; keys<br>-&gt; Hotkeys(左下角) 勾选<code>Show/hide iTerm2 with a system-wide hotkey</code><br>然后就按喜好设置快捷键啦</p>
<h2 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h2><p>可以自定终端背景色或导入现成的配色方案，比如<a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">Solarized</a><br>跳到Download下载后选择相应的文件导入<br><img src="/images/item2-solarized-setting.png" alt=""><br>你可以选择双击’.itermcolors‘文件或在preference -&gt; profiles -&gt; colors -&gt; Color Presets（右下角）-&gt; import… 中导入</p>
<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>osx中默认zsh为4.0版本，可直接切换使用或下载最新的5.0版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>将zsh设置成系统默认shell，以代替bash。 用编辑器打开/etc/shells，在末尾添加/usr/local/bin/zsh,保存关闭。 在终端中执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh <span class="_">-s</span> /usr/<span class="built_in">local</span>/bin/zsh</div></pre></td></tr></table></figure></p>
<p>重启iTerm2</p>
<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><p>纯傻瓜的方式对zsh进行配置并得到强大的功能，<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">官方地址</a><br>curl安装或使用wget<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -L http://install.ohmyz.sh | sh</div><div class="line"></div><div class="line">wget --no-check-certificate http://install.ohmyz.sh -O - | sh</div></pre></td></tr></table></figure></p>
<p>编辑 ~/.zshrc 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi ~/.zshrc</div><div class="line"></div><div class="line">ZSH_THEME=<span class="string">"agnoster"</span>          <span class="comment"># 使用 agnoster 主题，很好很强大</span></div><div class="line">DEFAULT_USER=<span class="string">"你的用户名"</span>     <span class="comment"># 增加这一项，便可以隐藏掉路径前面那串用户名</span></div></pre></td></tr></table></figure></p>
<h2 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h2><p><img src="/images/item2_ scrambled.png" alt=""><br>装好后可能会出现乱码，这时就需要字体库支持<br>推荐使用powerline <a href="https://github.com/powerline/fonts" target="_blank" rel="external">https://github.com/powerline/fonts</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/powerline/fonts.git ~/powerline-fonts</div><div class="line">source ~/powerline-fonts/install.sh</div></pre></td></tr></table></figure></p>
<p>执行上面两段命令后，会输出这样一行成功提示<br>All Powerline fonts installed to /Users/superdanny/Library/Fonts</p>
<p>回到item2的preference，在profiles -&gt; Text -&gt; Font 中更改字体为 <code>for Powerline</code> 后缀的字体<br>重启item2后乱码问题解决</p>
<h2 id="指令高亮"><a href="#指令高亮" class="headerlink" title="指令高亮"></a>指令高亮</h2><p>输入正确命令显示绿色，错误则为红色(ls为绿，l为红)<br>克隆工程到目录（推荐.zshrc所在目录），并在.zshrc文件末尾加上执行内容（XXX为文件目录）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-syntax-highlighting.git</div><div class="line"></div><div class="line">vi ~/.zshrc</div><div class="line"><span class="built_in">source</span> XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</div></pre></td></tr></table></figure></p>
<p>并且需修改.zshrc中的plugin配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git zsh-syntax-highlighting) <span class="comment"># 自己按需把要用的 plugin 写上</span></div></pre></td></tr></table></figure></p>
<h2 id="修改vim配色"><a href="#修改vim配色" class="headerlink" title="修改vim配色"></a>修改vim配色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cd solarized</div><div class="line">$ cd vim-colors-solarized/colors</div><div class="line">$ mkdir -p ~/.vim/colors</div><div class="line">$ cp solarized.vim ~/.vim/colors/</div><div class="line"></div><div class="line">$ vi ~/.vimrc</div><div class="line">syntax enable</div><div class="line">set background=dark</div><div class="line">colorscheme solarized</div></pre></td></tr></table></figure>
<h2 id="修改ls配色"><a href="#修改ls配色" class="headerlink" title="修改ls配色"></a>修改ls配色</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.bash_profile</div><div class="line"><span class="built_in">export</span> CLICOLOR=1</div></pre></td></tr></table></figure>
<p>修改完.bash_profile需要source .bash_profile</p>
<p>大功告成啦，enjoy it!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直听说item2是个比terminal强大的终端工具，为了提升命令行的体验，从teminal切换到了item2。&lt;/p&gt;
&lt;h2 id=&quot;下载Item2&quot;&gt;&lt;a href=&quot;#下载Item2&quot; class=&quot;headerlink&quot; title=&quot;下载Item2&quot;&gt;&lt;/a&gt;下载Item2&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.iterm2.com/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置开启快捷键&quot;&gt;&lt;a href=&quot;#设置开启快捷键&quot; class=&quot;headerlink&quot; title=&quot;设置开启快捷键&quot;&gt;&lt;/a&gt;设置开启快捷键&lt;/h2&gt;&lt;p&gt;前提是item2在后台运行&lt;br&gt;-&amp;gt; 进入preference(command ,)&lt;br&gt;-&amp;gt; keys&lt;br&gt;-&amp;gt; Hotkeys(左下角) 勾选&lt;code&gt;Show/hide iTerm2 with a system-wide hotkey&lt;/code&gt;&lt;br&gt;然后就按喜好设置快捷键啦&lt;/p&gt;
&lt;h2 id=&quot;配色方案&quot;&gt;&lt;a href=&quot;#配色方案&quot; class=&quot;headerlink&quot; title=&quot;配色方案&quot;&gt;&lt;/a&gt;配色方案&lt;/h2&gt;&lt;p&gt;可以自定终端背景色或导入现成的配色方案，比如&lt;a href=&quot;http://ethanschoonover.com/solarized&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Solarized&lt;/a&gt;&lt;br&gt;跳到Download下载后选择相应的文件导入&lt;br&gt;&lt;img src=&quot;/images/item2-solarized-setting.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;你可以选择双击’.itermcolors‘文件或在preference -&amp;gt; profiles -&amp;gt; colors -&amp;gt; Color Presets（右下角）-&amp;gt; import… 中导入&lt;/p&gt;
&lt;h2 id=&quot;安装zsh&quot;&gt;&lt;a href=&quot;#安装zsh&quot; class=&quot;headerlink&quot; title=&quot;安装zsh&quot;&gt;&lt;/a&gt;安装zsh&lt;/h2&gt;&lt;p&gt;osx中默认zsh为4.0版本，可直接切换使用或下载最新的5.0版本&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew install zsh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis传值乱码</title>
    <link href="https://amosannn.github.io/2017/08/27/mybatis-encoding-garbled/"/>
    <id>https://amosannn.github.io/2017/08/27/mybatis-encoding-garbled/</id>
    <published>2017-08-27T15:57:16.000Z</published>
    <updated>2017-08-28T21:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><h2 id="前端显示页面"><a href="#前端显示页面" class="headerlink" title="前端显示页面"></a>前端显示页面</h2><p><img src="/images/garbled_page1.png" alt=""></p>
<h2 id="数据库页面"><a href="#数据库页面" class="headerlink" title="数据库页面"></a>数据库页面</h2><p><img src="/images/garbled_db1.png" alt=""></p>
<h2 id="目前可以推测出的几种情况："><a href="#目前可以推测出的几种情况：" class="headerlink" title="目前可以推测出的几种情况："></a>目前可以推测出的几种情况：</h2><blockquote>
<p>数据库表的字符编码与服务端不同<br>字符编码为非utf-8,gbk等能识别中文的编码<br>配置文件出错（读取或编写格式</p>
</blockquote>
<a id="more"></a>
<p>试试手动插入数据<br><img src="/images/garbled_db2.png" alt=""><br>数据库显示正常，页面乱码<br>–&gt;排除数据库编码问题</p>
<h2 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h2><p><img src="/images/application_properties.png" alt=""><br>编码与数据库同为UTF-8</p>
<p>发现一段诡异代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;ampcharacterEncoding=UTF-8&amp;ampuseSSL=false</div></pre></td></tr></table></figure></p>
<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>删除amp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/toutiao?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</div></pre></td></tr></table></figure></p>
<p>重启系统，乱码问题解决.<br><img src="/images/garbled_db3.png" alt=""><br><img src="/images/garbled_page2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h1&gt;&lt;h2 id=&quot;前端显示页面&quot;&gt;&lt;a href=&quot;#前端显示页面&quot; class=&quot;headerlink&quot; title=&quot;前端显示页面&quot;&gt;&lt;/a&gt;前端显示页面&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/garbled_page1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据库页面&quot;&gt;&lt;a href=&quot;#数据库页面&quot; class=&quot;headerlink&quot; title=&quot;数据库页面&quot;&gt;&lt;/a&gt;数据库页面&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/garbled_db1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;目前可以推测出的几种情况：&quot;&gt;&lt;a href=&quot;#目前可以推测出的几种情况：&quot; class=&quot;headerlink&quot; title=&quot;目前可以推测出的几种情况：&quot;&gt;&lt;/a&gt;目前可以推测出的几种情况：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数据库表的字符编码与服务端不同&lt;br&gt;字符编码为非utf-8,gbk等能识别中文的编码&lt;br&gt;配置文件出错（读取或编写格式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="Mybatis" scheme="https://amosannn.github.io/tags/Mybatis/"/>
    
      <category term="MySQL" scheme="https://amosannn.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>懒汉式单例中双重检查的好处</title>
    <link href="https://amosannn.github.io/2017/07/27/benefits-of-singleton-pattern-double-checking/"/>
    <id>https://amosannn.github.io/2017/07/27/benefits-of-singleton-pattern-double-checking/</id>
    <published>2017-07-27T02:17:41.000Z</published>
    <updated>2017-08-02T23:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得前阵子面试金山时碰到了这样一个问题</p>
<p>1）下面哪一种写法更好，为什么？<br>2）请写出另一种单例模式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                singleton = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很显然，第一种代码块是线程不安全的。<br>比如说这种情况，有一个线程调用了getInstance()，但执行到if(singleton==null)这一步时，另一个线程也进入了这个方法，那么便会造成最终创建了两个Singleton实例。<br>而若是第二种代码块，在同步锁中加入第二次验证，就不怕多个线程同时进入方法体导致的多个实例被创建了。</p>
<p>以上两个方法块俗称懒汉式单例模式，意为调用时再创建实例对象。</p>
<p>另一种单例模式称为饿汉式单例模式，不同的点在于类装载时便完成了类实例化，以下两种方法块都是饿汉式的表现方法，是一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">     instance = <span class="keyword">new</span> Singleton();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再推荐个与双重检查一样线程安全的，静态内部类实现的懒汉式单例模式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">private</span> Singleton&#123;&#125;;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</div><div class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">          <span class="keyword">return</span> LazyHolder.INSTANCE;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p>
<p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得前阵子面试金山时碰到了这样一个问题&lt;/p&gt;
&lt;p&gt;1）下面哪一种写法更好，为什么？&lt;br&gt;2）请写出另一种单例模式。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java mail 报错 trying to connect to host &quot;*.*.com&quot;, port 587, isSSL true的另一种解决办法</title>
    <link href="https://amosannn.github.io/2017/07/18/trying-to-connect-to-host/"/>
    <id>https://amosannn.github.io/2017/07/18/trying-to-connect-to-host/</id>
    <published>2017-07-18T09:06:19.000Z</published>
    <updated>2017-08-02T23:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DEBUG SMTP: trying to connect to host &quot;xxx.xxx.com&quot;, port 587, isSSL true</div><div class="line">send failed... the exception is javax.mail.MessagingException: Could not connect to SMTP host: xxx.xxx.com, port: 587;</div><div class="line">  nested exception is:</div><div class="line">javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?</div></pre></td></tr></table></figure>
<p>如果你遇到了这种报错，而其它办法又解决不了。<br>不妨试试调整properties的put()方法放置顺序吧。<br>起初我也觉得put()顺序并不会影响到后续的其他方法块对它的读取啊。<br>然而当我调转了它们的位置时，不再报错了。。<br>邮件成功的发送出去了。</p>
<p>这是我放置properties的方法块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">MailSSLSocketFactory mssf = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">  mssf = <span class="keyword">new</span> MailSSLSocketFactory();</div><div class="line">  mssf.setTrustAllHosts(<span class="keyword">true</span>);</div><div class="line">  properties.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, mssf);</div><div class="line">  properties.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</div><div class="line">  properties.put(<span class="string">"mail.smtp.port"</span>, <span class="string">"587"</span>);</div><div class="line">  properties.put(<span class="string">"mail.smtp.ssl.socketFactory.port"</span>, <span class="string">"587"</span>);</div><div class="line">  properties.setProperty(<span class="string">"mail.imap.ssl.socketFactory.class"</span>, <span class="string">"DummySSLSocketFactory"</span>);</div><div class="line">  properties.setProperty(<span class="string">"mail.imap.ssl.socketFactory.fallback"</span>, <span class="string">"false"</span>);</div><div class="line"><span class="comment">// properties.setProperty("mail.smtp.port", "587");</span></div><div class="line"><span class="comment">// properties.setProperty("mail.smtp.socketFactory.port", "587");</span></div><div class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.enable", "true");</span></div><div class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.socketFactory.class", "DummySSLSocketFactory");</span></div><div class="line"><span class="comment">// properties.setProperty("mail.imap.ssl.socketFactory.fallback", "false");</span></div><div class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> GeneralSecurityException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>而你需要做的便是把</p>
<blockquote>
<p>properties.put(“mail.smtp.ssl.enable”, “true”);</p>
</blockquote>
<p>放在</p>
<blockquote>
<p>properties.put(“mail.smtp.port”, “587”);<br>properties.put(“mail.smtp.ssl.socketFactory.port”, “587”);</p>
</blockquote>
<p>的下面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何解决Java Mail下的530错误</title>
    <link href="https://amosannn.github.io/2017/07/11/java-mail-530-error/"/>
    <id>https://amosannn.github.io/2017/07/11/java-mail-530-error/</id>
    <published>2017-07-11T15:13:44.000Z</published>
    <updated>2017-07-11T23:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>玩了一下Java Mail，试图使用QQ邮箱作为发送者的邮箱，当然填写在代码中的邮箱密码写的是明文真实密码啦。<br>喜闻乐见的是出现了error 530，这个错误的产生实际上也是腾讯对自己邮箱用户的保护机制啦。其一是谁也不希望自己的产品被克隆。其二是用户异常操作时，找不到操作记录，是不是很扎心？</p>
<p>于是，兜了一大圈，再回到正题上来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.mail.AuthenticationFailedException: <span class="number">530</span> Error: <span class="function">A secure connection is <span class="title">requiered</span><span class="params">(such as ssl)</span>. More information at http:<span class="comment">//service.mail.qq.com/cgi-bin/help?id=28</span></span></div></pre></td></tr></table></figure></p>
<p>530报错提示需要一个安全的链接（比如ssl啦stl啦），这里就po一下ssl加密的代码吧。（其实stl也差不多的啦～<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</div><div class="line">sf.setTrustAllHosts(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">prop.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</div><div class="line">prop.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, sf);</div></pre></td></tr></table></figure></p>
<p>把它加进自己的代码里就阔以啦。<br>当然，邮箱里的POP3/SMTP服务与IMAP/SMTP服务就开起来吧。<br>嗯，还有，为了防止邮箱密码泄漏，腾讯给了每个用户数个登录第三方客户端的授权码，也就是可以当作密码使用的一段16位无序字母组合，那么，玩得开心。</p>
<blockquote>
<p>相关链接<br><a href="http://www.runoob.com/java/java-sending-email.html" target="_blank" rel="external">关于Java Mail简单粗暴的教程(菜鸟教程)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=371" target="_blank" rel="external">如何使用 Foxmail 等软件收发邮件？(腾讯)</a><br><a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331" target="_blank" rel="external">什么是 IMAP，它又是如何设置？(腾讯)</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩了一下Java Mail，试图使用QQ邮箱作为发送者的邮箱，当然填写在代码中的邮箱密码写的是明文真实密码啦。&lt;br&gt;喜闻乐见的是出现了error 530，这个错误的产生实际上也是腾讯对自己邮箱用户的保护机制啦。其一是谁也不希望自己的产品被克隆。其二是用户异常操作时，找不到
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="java" scheme="https://amosannn.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mac下的hexo安装出现异常</title>
    <link href="https://amosannn.github.io/2017/06/22/hexo-installation-error-on-mac/"/>
    <id>https://amosannn.github.io/2017/06/22/hexo-installation-error-on-mac/</id>
    <published>2017-06-22T10:16:59.000Z</published>
    <updated>2017-06-22T19:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>将hexo从win迁移到mac时发生了安装错误。</p>
<p>没有保留报错截图，就从日志文件中截取了关键段落。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">5751 error code ELIFECYCLE</div><div class="line">5752 error errno 1</div><div class="line">5753 error hexo-util@0.6.0 postinstall: `npm run build:highlight`</div><div class="line">5753 error Exit status 1</div><div class="line">5754 error Failed at the hexo-util@0.6.0 postinstall script.</div><div class="line">5754 error This is probably not a problem with npm. There is likely additional logging output above.</div><div class="line">5755 verbose exit [ 1, true ]</div></pre></td></tr></table></figure>
<p>按照网上的几种解法都没能完成安装</p>
<blockquote>
<p>sudo npm install -g hexo-cli</p>
<p>sudo npm install hexo –no-optional</p>
<p>sudo npm install -g hexo-cli –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>最后尝试进入root权限中执行npm命令，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo -s</div><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装成功。<br><a id="more"></a><br>若不知道如何退出root权限，可以使用以下任意一个命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exit</div><div class="line">logout</div><div class="line">ctrl+D</div></pre></td></tr></table></figure>
<p>启动hexo后又出现了新的报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">(node:3413) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure>
<p>虽不影响使用却看着难受，然而并没有找到能解决它的方法</p>
<p>╮(╯▽╰)╭</p>
<p>能找到的依旧是这条命令，无非是重装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install hexo --no-optional</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将hexo从win迁移到mac时发生了安装错误。&lt;/p&gt;
&lt;p&gt;没有保留报错截图，就从日志文件中截取了关键段落。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;5751 error code ELIFECYCLE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5752 error errno 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5753 error hexo-util@0.6.0 postinstall: `npm run build:highlight`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5753 error Exit status 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5754 error Failed at the hexo-util@0.6.0 postinstall script.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5754 error This is probably not a problem with npm. There is likely additional logging output above.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5755 verbose exit [ 1, true ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照网上的几种解法都没能完成安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo npm install -g hexo-cli&lt;/p&gt;
&lt;p&gt;sudo npm install hexo –no-optional&lt;/p&gt;
&lt;p&gt;sudo npm install -g hexo-cli –registry=&lt;a href=&quot;https://registry.npm.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://registry.npm.taobao.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后尝试进入root权限中执行npm命令，即&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo -s&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功。&lt;br&gt;
    
    </summary>
    
      <category term="技术一路走到黑" scheme="https://amosannn.github.io/categories/%E6%8A%80%E6%9C%AF%E4%B8%80%E8%B7%AF%E8%B5%B0%E5%88%B0%E9%BB%91/"/>
    
    
      <category term="hexo" scheme="https://amosannn.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
